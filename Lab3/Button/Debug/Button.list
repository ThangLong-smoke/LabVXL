
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002edc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800300c  0800300c  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800300c  0800300c  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800300c  0800300c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000088  0800309c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800309c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000934d  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3a  00000000  00000000  000293fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002ae38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b56  00000000  00000000  0002c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b371  00000000  00000000  00042cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008248c  00000000  00000000  0004e06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d04fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002884  00000000  00000000  000d0550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fd0 	.word	0x08002fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002fd0 	.word	0x08002fd0

0800014c <subcount1>:
int chuc = 0;	// value 1
int dvi = 0;	// value 2

//// sub count road 1 ////
void subcount1()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer3_flag == 1)
 8000150:	4b13      	ldr	r3, [pc, #76]	; (80001a0 <subcount1+0x54>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d121      	bne.n	800019c <subcount1+0x50>
	{
		setTimer3(1000);
 8000158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800015c:	f001 fb0a 	bl	8001774 <setTimer3>
		count1--;
 8000160:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <subcount1+0x58>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	3b01      	subs	r3, #1
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <subcount1+0x58>)
 8000168:	6013      	str	r3, [r2, #0]

		count [0] = count1 / 10;	//
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <subcount1+0x58>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <subcount1+0x5c>)
 8000170:	fb82 1203 	smull	r1, r2, r2, r3
 8000174:	1092      	asrs	r2, r2, #2
 8000176:	17db      	asrs	r3, r3, #31
 8000178:	1ad3      	subs	r3, r2, r3
 800017a:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <subcount1+0x60>)
 800017c:	6013      	str	r3, [r2, #0]
		count [1] = count1 % 10;
 800017e:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <subcount1+0x58>)
 8000180:	6819      	ldr	r1, [r3, #0]
 8000182:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <subcount1+0x5c>)
 8000184:	fb83 2301 	smull	r2, r3, r3, r1
 8000188:	109a      	asrs	r2, r3, #2
 800018a:	17cb      	asrs	r3, r1, #31
 800018c:	1ad2      	subs	r2, r2, r3
 800018e:	4613      	mov	r3, r2
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	4413      	add	r3, r2
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	1aca      	subs	r2, r1, r3
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <subcount1+0x60>)
 800019a:	605a      	str	r2, [r3, #4]
	}
}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	200000d8 	.word	0x200000d8
 80001a4:	20000000 	.word	0x20000000
 80001a8:	66666667 	.word	0x66666667
 80001ac:	20000014 	.word	0x20000014

080001b0 <subcount2>:

//// sub count road 2 ////
void subcount2()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	if(timer4_flag == 1)
 80001b4:	4b13      	ldr	r3, [pc, #76]	; (8000204 <subcount2+0x54>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d121      	bne.n	8000200 <subcount2+0x50>
	{
		setTimer4(1000);
 80001bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c0:	f001 faf2 	bl	80017a8 <setTimer4>
		count2--;
 80001c4:	4b10      	ldr	r3, [pc, #64]	; (8000208 <subcount2+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	3b01      	subs	r3, #1
 80001ca:	4a0f      	ldr	r2, [pc, #60]	; (8000208 <subcount2+0x58>)
 80001cc:	6013      	str	r3, [r2, #0]

		count [2] = count2 / 10;
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <subcount2+0x58>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0e      	ldr	r2, [pc, #56]	; (800020c <subcount2+0x5c>)
 80001d4:	fb82 1203 	smull	r1, r2, r2, r3
 80001d8:	1092      	asrs	r2, r2, #2
 80001da:	17db      	asrs	r3, r3, #31
 80001dc:	1ad3      	subs	r3, r2, r3
 80001de:	4a0c      	ldr	r2, [pc, #48]	; (8000210 <subcount2+0x60>)
 80001e0:	6093      	str	r3, [r2, #8]
		count [3] = count2 % 10;
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <subcount2+0x58>)
 80001e4:	6819      	ldr	r1, [r3, #0]
 80001e6:	4b09      	ldr	r3, [pc, #36]	; (800020c <subcount2+0x5c>)
 80001e8:	fb83 2301 	smull	r2, r3, r3, r1
 80001ec:	109a      	asrs	r2, r3, #2
 80001ee:	17cb      	asrs	r3, r1, #31
 80001f0:	1ad2      	subs	r2, r2, r3
 80001f2:	4613      	mov	r3, r2
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	4413      	add	r3, r2
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	1aca      	subs	r2, r1, r3
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <subcount2+0x60>)
 80001fe:	60da      	str	r2, [r3, #12]
	}
}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}
 8000204:	200000e0 	.word	0x200000e0
 8000208:	20000004 	.word	0x20000004
 800020c:	66666667 	.word	0x66666667
 8000210:	20000014 	.word	0x20000014

08000214 <update>:

//// timer 5 for index_led
void update()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	  if (timer5_flag == 1)
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <update+0x30>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b01      	cmp	r3, #1
 800021e:	d108      	bne.n	8000232 <update+0x1e>
	  {
		  setTimer5(500);
 8000220:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000224:	f001 fada 	bl	80017dc <setTimer5>
		  index_led++;
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <update+0x34>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <update+0x34>)
 8000230:	6013      	str	r3, [r2, #0]
	  }

	  if(index_led == 2)
 8000232:	4b05      	ldr	r3, [pc, #20]	; (8000248 <update+0x34>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b02      	cmp	r3, #2
 8000238:	d102      	bne.n	8000240 <update+0x2c>
		  index_led = 0;
 800023a:	4b03      	ldr	r3, [pc, #12]	; (8000248 <update+0x34>)
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200000e8 	.word	0x200000e8
 8000248:	200000a4 	.word	0x200000a4

0800024c <controlButton>:

//// BUTTON ////////////
void controlButton()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	if (isButtonNPressed(0) == 1)
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fc9f 	bl	8000b94 <isButtonNPressed>
 8000256:	4603      	mov	r3, r0
 8000258:	2b01      	cmp	r3, #1
 800025a:	d104      	bne.n	8000266 <controlButton+0x1a>
		mode++;
 800025c:	4b7c      	ldr	r3, [pc, #496]	; (8000450 <controlButton+0x204>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a7b      	ldr	r2, [pc, #492]	; (8000450 <controlButton+0x204>)
 8000264:	6013      	str	r3, [r2, #0]

	if(mode == 5)
 8000266:	4b7a      	ldr	r3, [pc, #488]	; (8000450 <controlButton+0x204>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b05      	cmp	r3, #5
 800026c:	d111      	bne.n	8000292 <controlButton+0x46>
	{
		mode = 1;
 800026e:	4b78      	ldr	r3, [pc, #480]	; (8000450 <controlButton+0x204>)
 8000270:	2201      	movs	r2, #1
 8000272:	601a      	str	r2, [r3, #0]
		status_1 = INIT_1;
 8000274:	4b77      	ldr	r3, [pc, #476]	; (8000454 <controlButton+0x208>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
		status_2 = INIT_2;
 800027a:	4b77      	ldr	r3, [pc, #476]	; (8000458 <controlButton+0x20c>)
 800027c:	2201      	movs	r2, #1
 800027e:	601a      	str	r2, [r3, #0]

		increaseRed = 0;
 8000280:	4b76      	ldr	r3, [pc, #472]	; (800045c <controlButton+0x210>)
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
		increaseYellow = 0;
 8000286:	4b76      	ldr	r3, [pc, #472]	; (8000460 <controlButton+0x214>)
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
		increaseGreen = 0;
 800028c:	4b75      	ldr	r3, [pc, #468]	; (8000464 <controlButton+0x218>)
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
	}

	////// display MODE /////////
	if(index_led == 0)
 8000292:	4b75      	ldr	r3, [pc, #468]	; (8000468 <controlButton+0x21c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10e      	bne.n	80002b8 <controlButton+0x6c>
	{
		display7SEG_1(0);
 800029a:	2000      	movs	r0, #0
 800029c:	f000 fe5c 	bl	8000f58 <display7SEG_1>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);	// seg 1 off
 80002a0:	2200      	movs	r2, #0
 80002a2:	2110      	movs	r1, #16
 80002a4:	4871      	ldr	r0, [pc, #452]	; (800046c <controlButton+0x220>)
 80002a6:	f001 fe72 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);	// seg 2 on
 80002aa:	2201      	movs	r2, #1
 80002ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b0:	486e      	ldr	r0, [pc, #440]	; (800046c <controlButton+0x220>)
 80002b2:	f001 fe6c 	bl	8001f8e <HAL_GPIO_WritePin>
 80002b6:	e00f      	b.n	80002d8 <controlButton+0x8c>
	}
	else
	{
		display7SEG_1(mode);
 80002b8:	4b65      	ldr	r3, [pc, #404]	; (8000450 <controlButton+0x204>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fe4b 	bl	8000f58 <display7SEG_1>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);	// seg 1 on
 80002c2:	2201      	movs	r2, #1
 80002c4:	2110      	movs	r1, #16
 80002c6:	4869      	ldr	r0, [pc, #420]	; (800046c <controlButton+0x220>)
 80002c8:	f001 fe61 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);	// seg 2 off
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002d2:	4866      	ldr	r0, [pc, #408]	; (800046c <controlButton+0x220>)
 80002d4:	f001 fe5b 	bl	8001f8e <HAL_GPIO_WritePin>
	}

	switch(mode)
 80002d8:	4b5d      	ldr	r3, [pc, #372]	; (8000450 <controlButton+0x204>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	2b03      	cmp	r3, #3
 80002e0:	f200 8225 	bhi.w	800072e <controlButton+0x4e2>
 80002e4:	a201      	add	r2, pc, #4	; (adr r2, 80002ec <controlButton+0xa0>)
 80002e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ea:	bf00      	nop
 80002ec:	0800072f 	.word	0x0800072f
 80002f0:	080002fd 	.word	0x080002fd
 80002f4:	08000489 	.word	0x08000489
 80002f8:	080005dd 	.word	0x080005dd
	{
	case 1:
		break;
	case 2:			// increase time duration RED
		////// // led RED BLINK //////////
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);		// yellow 1 off
 80002fc:	2201      	movs	r2, #1
 80002fe:	2140      	movs	r1, #64	; 0x40
 8000300:	485a      	ldr	r0, [pc, #360]	; (800046c <controlButton+0x220>)
 8000302:	f001 fe44 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);		// yellow 2 off
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030c:	4857      	ldr	r0, [pc, #348]	; (800046c <controlButton+0x220>)
 800030e:	f001 fe3e 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);		// green 1 off
 8000312:	2201      	movs	r2, #1
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	4855      	ldr	r0, [pc, #340]	; (800046c <controlButton+0x220>)
 8000318:	f001 fe39 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);		// green 2 off
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000322:	4852      	ldr	r0, [pc, #328]	; (800046c <controlButton+0x220>)
 8000324:	f001 fe33 	bl	8001f8e <HAL_GPIO_WritePin>

		if(timer6_flag == 1)
 8000328:	4b51      	ldr	r3, [pc, #324]	; (8000470 <controlButton+0x224>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d10c      	bne.n	800034a <controlButton+0xfe>
		{
			setTimer6(500);
 8000330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000334:	f001 fa6c 	bl	8001810 <setTimer6>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8000338:	2120      	movs	r1, #32
 800033a:	484c      	ldr	r0, [pc, #304]	; (800046c <controlButton+0x220>)
 800033c:	f001 fe3f 	bl	8001fbe <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8000340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000344:	4849      	ldr	r0, [pc, #292]	; (800046c <controlButton+0x220>)
 8000346:	f001 fe3a 	bl	8001fbe <HAL_GPIO_TogglePin>
		}

		//// PRESS BUTTON 2 ///////
		if(isButtonNPressed(1) == 1)
 800034a:	2001      	movs	r0, #1
 800034c:	f000 fc22 	bl	8000b94 <isButtonNPressed>
 8000350:	4603      	mov	r3, r0
 8000352:	2b01      	cmp	r3, #1
 8000354:	d118      	bne.n	8000388 <controlButton+0x13c>
		{
			increaseRed++;
 8000356:	4b41      	ldr	r3, [pc, #260]	; (800045c <controlButton+0x210>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3301      	adds	r3, #1
 800035c:	4a3f      	ldr	r2, [pc, #252]	; (800045c <controlButton+0x210>)
 800035e:	6013      	str	r3, [r2, #0]

			if((timered/1000 + increaseRed) > 99)
 8000360:	4b44      	ldr	r3, [pc, #272]	; (8000474 <controlButton+0x228>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a44      	ldr	r2, [pc, #272]	; (8000478 <controlButton+0x22c>)
 8000366:	fb82 1203 	smull	r1, r2, r2, r3
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	17db      	asrs	r3, r3, #31
 800036e:	1ad2      	subs	r2, r2, r3
 8000370:	4b3a      	ldr	r3, [pc, #232]	; (800045c <controlButton+0x210>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4413      	add	r3, r2
 8000376:	2b63      	cmp	r3, #99	; 0x63
 8000378:	dd06      	ble.n	8000388 <controlButton+0x13c>
			{
				timered = 1000;
 800037a:	4b3e      	ldr	r3, [pc, #248]	; (8000474 <controlButton+0x228>)
 800037c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000380:	601a      	str	r2, [r3, #0]
				increaseRed = 0;
 8000382:	4b36      	ldr	r3, [pc, #216]	; (800045c <controlButton+0x210>)
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
			}
		}

		////// DISPLAY VALUE  /////////
		chuc = (timered/1000 + increaseRed)/10;
 8000388:	4b3a      	ldr	r3, [pc, #232]	; (8000474 <controlButton+0x228>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a3a      	ldr	r2, [pc, #232]	; (8000478 <controlButton+0x22c>)
 800038e:	fb82 1203 	smull	r1, r2, r2, r3
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	17db      	asrs	r3, r3, #31
 8000396:	1ad2      	subs	r2, r2, r3
 8000398:	4b30      	ldr	r3, [pc, #192]	; (800045c <controlButton+0x210>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4413      	add	r3, r2
 800039e:	4a37      	ldr	r2, [pc, #220]	; (800047c <controlButton+0x230>)
 80003a0:	fb82 1203 	smull	r1, r2, r2, r3
 80003a4:	1092      	asrs	r2, r2, #2
 80003a6:	17db      	asrs	r3, r3, #31
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	4a35      	ldr	r2, [pc, #212]	; (8000480 <controlButton+0x234>)
 80003ac:	6013      	str	r3, [r2, #0]
		dvi = (timered/1000 + increaseRed)%10;
 80003ae:	4b31      	ldr	r3, [pc, #196]	; (8000474 <controlButton+0x228>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a31      	ldr	r2, [pc, #196]	; (8000478 <controlButton+0x22c>)
 80003b4:	fb82 1203 	smull	r1, r2, r2, r3
 80003b8:	1192      	asrs	r2, r2, #6
 80003ba:	17db      	asrs	r3, r3, #31
 80003bc:	1ad2      	subs	r2, r2, r3
 80003be:	4b27      	ldr	r3, [pc, #156]	; (800045c <controlButton+0x210>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	18d1      	adds	r1, r2, r3
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <controlButton+0x230>)
 80003c6:	fb83 2301 	smull	r2, r3, r3, r1
 80003ca:	109a      	asrs	r2, r3, #2
 80003cc:	17cb      	asrs	r3, r1, #31
 80003ce:	1ad2      	subs	r2, r2, r3
 80003d0:	4613      	mov	r3, r2
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	4413      	add	r3, r2
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	1aca      	subs	r2, r1, r3
 80003da:	4b2a      	ldr	r3, [pc, #168]	; (8000484 <controlButton+0x238>)
 80003dc:	601a      	str	r2, [r3, #0]

		if(index_led == 0)
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <controlButton+0x21c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d10f      	bne.n	8000406 <controlButton+0x1ba>
		{
			display7SEG_2(chuc);
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <controlButton+0x234>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 ff3a 	bl	8001264 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 off
 80003f0:	2200      	movs	r2, #0
 80003f2:	2104      	movs	r1, #4
 80003f4:	481d      	ldr	r0, [pc, #116]	; (800046c <controlButton+0x220>)
 80003f6:	f001 fdca 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 on
 80003fa:	2201      	movs	r2, #1
 80003fc:	2108      	movs	r1, #8
 80003fe:	481b      	ldr	r0, [pc, #108]	; (800046c <controlButton+0x220>)
 8000400:	f001 fdc5 	bl	8001f8e <HAL_GPIO_WritePin>
 8000404:	e00e      	b.n	8000424 <controlButton+0x1d8>
		}
		else
		{
			display7SEG_2(dvi);
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <controlButton+0x238>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f000 ff2a 	bl	8001264 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 on
 8000410:	2201      	movs	r2, #1
 8000412:	2104      	movs	r1, #4
 8000414:	4815      	ldr	r0, [pc, #84]	; (800046c <controlButton+0x220>)
 8000416:	f001 fdba 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 off
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	4813      	ldr	r0, [pc, #76]	; (800046c <controlButton+0x220>)
 8000420:	f001 fdb5 	bl	8001f8e <HAL_GPIO_WritePin>
		}

		////// PRESS BUTTON 3 /////////
		if(isButtonNPressed(2) == 1)
 8000424:	2002      	movs	r0, #2
 8000426:	f000 fbb5 	bl	8000b94 <isButtonNPressed>
 800042a:	4603      	mov	r3, r0
 800042c:	2b01      	cmp	r3, #1
 800042e:	f040 8180 	bne.w	8000732 <controlButton+0x4e6>
		{
			timered += increaseRed*1000;
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <controlButton+0x210>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800043a:	fb02 f203 	mul.w	r2, r2, r3
 800043e:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <controlButton+0x228>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4413      	add	r3, r2
 8000444:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <controlButton+0x228>)
 8000446:	6013      	str	r3, [r2, #0]
			increaseRed = 0;
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <controlButton+0x210>)
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
		}
		break;
 800044e:	e170      	b.n	8000732 <controlButton+0x4e6>
 8000450:	20000024 	.word	0x20000024
 8000454:	20000028 	.word	0x20000028
 8000458:	2000002c 	.word	0x2000002c
 800045c:	200000a8 	.word	0x200000a8
 8000460:	200000ac 	.word	0x200000ac
 8000464:	200000b0 	.word	0x200000b0
 8000468:	200000a4 	.word	0x200000a4
 800046c:	40010800 	.word	0x40010800
 8000470:	200000f0 	.word	0x200000f0
 8000474:	20000008 	.word	0x20000008
 8000478:	10624dd3 	.word	0x10624dd3
 800047c:	66666667 	.word	0x66666667
 8000480:	200000b4 	.word	0x200000b4
 8000484:	200000b8 	.word	0x200000b8
	case 3:			// increase time duration YELLOW
		////// // led RED BLINK //////////
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);		// RED 1 off
 8000488:	2201      	movs	r2, #1
 800048a:	2120      	movs	r1, #32
 800048c:	48ac      	ldr	r0, [pc, #688]	; (8000740 <controlButton+0x4f4>)
 800048e:	f001 fd7e 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);		// RED 2 off
 8000492:	2201      	movs	r2, #1
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	48a9      	ldr	r0, [pc, #676]	; (8000740 <controlButton+0x4f4>)
 800049a:	f001 fd78 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);		// green 1 off
 800049e:	2201      	movs	r2, #1
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	48a7      	ldr	r0, [pc, #668]	; (8000740 <controlButton+0x4f4>)
 80004a4:	f001 fd73 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);		// green 2 off
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ae:	48a4      	ldr	r0, [pc, #656]	; (8000740 <controlButton+0x4f4>)
 80004b0:	f001 fd6d 	bl	8001f8e <HAL_GPIO_WritePin>

		if(timer6_flag == 1)
 80004b4:	4ba3      	ldr	r3, [pc, #652]	; (8000744 <controlButton+0x4f8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d10c      	bne.n	80004d6 <controlButton+0x28a>
		{
			setTimer6(500);
 80004bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c0:	f001 f9a6 	bl	8001810 <setTimer6>
			HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	489e      	ldr	r0, [pc, #632]	; (8000740 <controlButton+0x4f4>)
 80004c8:	f001 fd79 	bl	8001fbe <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 80004cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d0:	489b      	ldr	r0, [pc, #620]	; (8000740 <controlButton+0x4f4>)
 80004d2:	f001 fd74 	bl	8001fbe <HAL_GPIO_TogglePin>
		}

		//// PRESS BUTTON 2 ///////
		if(isButtonNPressed(1) == 1)
 80004d6:	2001      	movs	r0, #1
 80004d8:	f000 fb5c 	bl	8000b94 <isButtonNPressed>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d118      	bne.n	8000514 <controlButton+0x2c8>
		{
			increaseYellow++;
 80004e2:	4b99      	ldr	r3, [pc, #612]	; (8000748 <controlButton+0x4fc>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	3301      	adds	r3, #1
 80004e8:	4a97      	ldr	r2, [pc, #604]	; (8000748 <controlButton+0x4fc>)
 80004ea:	6013      	str	r3, [r2, #0]

			if((timeyellow/1000 + increaseYellow) > 99)
 80004ec:	4b97      	ldr	r3, [pc, #604]	; (800074c <controlButton+0x500>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a97      	ldr	r2, [pc, #604]	; (8000750 <controlButton+0x504>)
 80004f2:	fb82 1203 	smull	r1, r2, r2, r3
 80004f6:	1192      	asrs	r2, r2, #6
 80004f8:	17db      	asrs	r3, r3, #31
 80004fa:	1ad2      	subs	r2, r2, r3
 80004fc:	4b92      	ldr	r3, [pc, #584]	; (8000748 <controlButton+0x4fc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4413      	add	r3, r2
 8000502:	2b63      	cmp	r3, #99	; 0x63
 8000504:	dd06      	ble.n	8000514 <controlButton+0x2c8>
			{
				timeyellow = 1000;
 8000506:	4b91      	ldr	r3, [pc, #580]	; (800074c <controlButton+0x500>)
 8000508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050c:	601a      	str	r2, [r3, #0]
				increaseYellow = 0;
 800050e:	4b8e      	ldr	r3, [pc, #568]	; (8000748 <controlButton+0x4fc>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
			}
		}

		////// DISPLAY VALUE  /////////
		chuc = (timeyellow/1000 + increaseYellow)/10;
 8000514:	4b8d      	ldr	r3, [pc, #564]	; (800074c <controlButton+0x500>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a8d      	ldr	r2, [pc, #564]	; (8000750 <controlButton+0x504>)
 800051a:	fb82 1203 	smull	r1, r2, r2, r3
 800051e:	1192      	asrs	r2, r2, #6
 8000520:	17db      	asrs	r3, r3, #31
 8000522:	1ad2      	subs	r2, r2, r3
 8000524:	4b88      	ldr	r3, [pc, #544]	; (8000748 <controlButton+0x4fc>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4413      	add	r3, r2
 800052a:	4a8a      	ldr	r2, [pc, #552]	; (8000754 <controlButton+0x508>)
 800052c:	fb82 1203 	smull	r1, r2, r2, r3
 8000530:	1092      	asrs	r2, r2, #2
 8000532:	17db      	asrs	r3, r3, #31
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	4a88      	ldr	r2, [pc, #544]	; (8000758 <controlButton+0x50c>)
 8000538:	6013      	str	r3, [r2, #0]
		dvi = (timeyellow/1000 + increaseYellow)%10;
 800053a:	4b84      	ldr	r3, [pc, #528]	; (800074c <controlButton+0x500>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a84      	ldr	r2, [pc, #528]	; (8000750 <controlButton+0x504>)
 8000540:	fb82 1203 	smull	r1, r2, r2, r3
 8000544:	1192      	asrs	r2, r2, #6
 8000546:	17db      	asrs	r3, r3, #31
 8000548:	1ad2      	subs	r2, r2, r3
 800054a:	4b7f      	ldr	r3, [pc, #508]	; (8000748 <controlButton+0x4fc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	18d1      	adds	r1, r2, r3
 8000550:	4b80      	ldr	r3, [pc, #512]	; (8000754 <controlButton+0x508>)
 8000552:	fb83 2301 	smull	r2, r3, r3, r1
 8000556:	109a      	asrs	r2, r3, #2
 8000558:	17cb      	asrs	r3, r1, #31
 800055a:	1ad2      	subs	r2, r2, r3
 800055c:	4613      	mov	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	4413      	add	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	1aca      	subs	r2, r1, r3
 8000566:	4b7d      	ldr	r3, [pc, #500]	; (800075c <controlButton+0x510>)
 8000568:	601a      	str	r2, [r3, #0]

		if(index_led == 0)
 800056a:	4b7d      	ldr	r3, [pc, #500]	; (8000760 <controlButton+0x514>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10f      	bne.n	8000592 <controlButton+0x346>
		{
			display7SEG_2(chuc);
 8000572:	4b79      	ldr	r3, [pc, #484]	; (8000758 <controlButton+0x50c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fe74 	bl	8001264 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 off
 800057c:	2200      	movs	r2, #0
 800057e:	2104      	movs	r1, #4
 8000580:	486f      	ldr	r0, [pc, #444]	; (8000740 <controlButton+0x4f4>)
 8000582:	f001 fd04 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 on
 8000586:	2201      	movs	r2, #1
 8000588:	2108      	movs	r1, #8
 800058a:	486d      	ldr	r0, [pc, #436]	; (8000740 <controlButton+0x4f4>)
 800058c:	f001 fcff 	bl	8001f8e <HAL_GPIO_WritePin>
 8000590:	e00e      	b.n	80005b0 <controlButton+0x364>
		}
		else
		{
			display7SEG_2(dvi);
 8000592:	4b72      	ldr	r3, [pc, #456]	; (800075c <controlButton+0x510>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fe64 	bl	8001264 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 on
 800059c:	2201      	movs	r2, #1
 800059e:	2104      	movs	r1, #4
 80005a0:	4867      	ldr	r0, [pc, #412]	; (8000740 <controlButton+0x4f4>)
 80005a2:	f001 fcf4 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 off
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	4865      	ldr	r0, [pc, #404]	; (8000740 <controlButton+0x4f4>)
 80005ac:	f001 fcef 	bl	8001f8e <HAL_GPIO_WritePin>
		}

		////// PRESS BUTTON 3 /////////
		if(isButtonNPressed(2) == 1)
 80005b0:	2002      	movs	r0, #2
 80005b2:	f000 faef 	bl	8000b94 <isButtonNPressed>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	f040 80bc 	bne.w	8000736 <controlButton+0x4ea>
		{
			timeyellow += increaseYellow*1000;
 80005be:	4b62      	ldr	r3, [pc, #392]	; (8000748 <controlButton+0x4fc>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c6:	fb02 f203 	mul.w	r2, r2, r3
 80005ca:	4b60      	ldr	r3, [pc, #384]	; (800074c <controlButton+0x500>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a5e      	ldr	r2, [pc, #376]	; (800074c <controlButton+0x500>)
 80005d2:	6013      	str	r3, [r2, #0]
			increaseYellow = 0;
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <controlButton+0x4fc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
		}
		break;
 80005da:	e0ac      	b.n	8000736 <controlButton+0x4ea>
	case 4:			// increase time duration GREEN
		////// // led RED BLINK //////////
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);		// yellow 1 off
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	4857      	ldr	r0, [pc, #348]	; (8000740 <controlButton+0x4f4>)
 80005e2:	f001 fcd4 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);		// yellow 2 off
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ec:	4854      	ldr	r0, [pc, #336]	; (8000740 <controlButton+0x4f4>)
 80005ee:	f001 fcce 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);		// red 1 off
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	4852      	ldr	r0, [pc, #328]	; (8000740 <controlButton+0x4f4>)
 80005f8:	f001 fcc9 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);		// red 2 off
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000602:	484f      	ldr	r0, [pc, #316]	; (8000740 <controlButton+0x4f4>)
 8000604:	f001 fcc3 	bl	8001f8e <HAL_GPIO_WritePin>

		if(timer6_flag == 1)
 8000608:	4b4e      	ldr	r3, [pc, #312]	; (8000744 <controlButton+0x4f8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d10c      	bne.n	800062a <controlButton+0x3de>
		{
			setTimer6(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000614:	f001 f8fc 	bl	8001810 <setTimer6>
			HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	4849      	ldr	r0, [pc, #292]	; (8000740 <controlButton+0x4f4>)
 800061c:	f001 fccf 	bl	8001fbe <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 8000620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000624:	4846      	ldr	r0, [pc, #280]	; (8000740 <controlButton+0x4f4>)
 8000626:	f001 fcca 	bl	8001fbe <HAL_GPIO_TogglePin>
		}

		//// PRESS BUTTON 2 ///////
		if(isButtonNPressed(1) == 1)
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fab2 	bl	8000b94 <isButtonNPressed>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	d118      	bne.n	8000668 <controlButton+0x41c>
		{
			increaseGreen++;
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <controlButton+0x518>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	4a49      	ldr	r2, [pc, #292]	; (8000764 <controlButton+0x518>)
 800063e:	6013      	str	r3, [r2, #0]

			if((timegreen/1000 + increaseGreen) > 99)
 8000640:	4b49      	ldr	r3, [pc, #292]	; (8000768 <controlButton+0x51c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a42      	ldr	r2, [pc, #264]	; (8000750 <controlButton+0x504>)
 8000646:	fb82 1203 	smull	r1, r2, r2, r3
 800064a:	1192      	asrs	r2, r2, #6
 800064c:	17db      	asrs	r3, r3, #31
 800064e:	1ad2      	subs	r2, r2, r3
 8000650:	4b44      	ldr	r3, [pc, #272]	; (8000764 <controlButton+0x518>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4413      	add	r3, r2
 8000656:	2b63      	cmp	r3, #99	; 0x63
 8000658:	dd06      	ble.n	8000668 <controlButton+0x41c>
			{
				timegreen = 1000;
 800065a:	4b43      	ldr	r3, [pc, #268]	; (8000768 <controlButton+0x51c>)
 800065c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000660:	601a      	str	r2, [r3, #0]
				increaseGreen = 0;
 8000662:	4b40      	ldr	r3, [pc, #256]	; (8000764 <controlButton+0x518>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
			}
		}

		////// DISPLAY VALUE  /////////
		chuc = (timegreen/1000 + increaseGreen)/10;
 8000668:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <controlButton+0x51c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a38      	ldr	r2, [pc, #224]	; (8000750 <controlButton+0x504>)
 800066e:	fb82 1203 	smull	r1, r2, r2, r3
 8000672:	1192      	asrs	r2, r2, #6
 8000674:	17db      	asrs	r3, r3, #31
 8000676:	1ad2      	subs	r2, r2, r3
 8000678:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <controlButton+0x518>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4413      	add	r3, r2
 800067e:	4a35      	ldr	r2, [pc, #212]	; (8000754 <controlButton+0x508>)
 8000680:	fb82 1203 	smull	r1, r2, r2, r3
 8000684:	1092      	asrs	r2, r2, #2
 8000686:	17db      	asrs	r3, r3, #31
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	4a33      	ldr	r2, [pc, #204]	; (8000758 <controlButton+0x50c>)
 800068c:	6013      	str	r3, [r2, #0]
		dvi = (timegreen/1000 + increaseGreen)%10;
 800068e:	4b36      	ldr	r3, [pc, #216]	; (8000768 <controlButton+0x51c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <controlButton+0x504>)
 8000694:	fb82 1203 	smull	r1, r2, r2, r3
 8000698:	1192      	asrs	r2, r2, #6
 800069a:	17db      	asrs	r3, r3, #31
 800069c:	1ad2      	subs	r2, r2, r3
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <controlButton+0x518>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	18d1      	adds	r1, r2, r3
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <controlButton+0x508>)
 80006a6:	fb83 2301 	smull	r2, r3, r3, r1
 80006aa:	109a      	asrs	r2, r3, #2
 80006ac:	17cb      	asrs	r3, r1, #31
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	4613      	mov	r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	1aca      	subs	r2, r1, r3
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <controlButton+0x510>)
 80006bc:	601a      	str	r2, [r3, #0]

		if(index_led == 0)
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <controlButton+0x514>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10f      	bne.n	80006e6 <controlButton+0x49a>
		{
			display7SEG_2(chuc);
 80006c6:	4b24      	ldr	r3, [pc, #144]	; (8000758 <controlButton+0x50c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fdca 	bl	8001264 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 off
 80006d0:	2200      	movs	r2, #0
 80006d2:	2104      	movs	r1, #4
 80006d4:	481a      	ldr	r0, [pc, #104]	; (8000740 <controlButton+0x4f4>)
 80006d6:	f001 fc5a 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 on
 80006da:	2201      	movs	r2, #1
 80006dc:	2108      	movs	r1, #8
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <controlButton+0x4f4>)
 80006e0:	f001 fc55 	bl	8001f8e <HAL_GPIO_WritePin>
 80006e4:	e00e      	b.n	8000704 <controlButton+0x4b8>
		}
		else
		{
			display7SEG_2(dvi);
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <controlButton+0x510>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fdba 	bl	8001264 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 on
 80006f0:	2201      	movs	r2, #1
 80006f2:	2104      	movs	r1, #4
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <controlButton+0x4f4>)
 80006f6:	f001 fc4a 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 off
 80006fa:	2200      	movs	r2, #0
 80006fc:	2108      	movs	r1, #8
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <controlButton+0x4f4>)
 8000700:	f001 fc45 	bl	8001f8e <HAL_GPIO_WritePin>
		}

		////// PRESS BUTTON 3 /////////
		if(isButtonNPressed(2) == 1)
 8000704:	2002      	movs	r0, #2
 8000706:	f000 fa45 	bl	8000b94 <isButtonNPressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d114      	bne.n	800073a <controlButton+0x4ee>
		{
			timegreen += increaseGreen*1000;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <controlButton+0x518>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000718:	fb02 f203 	mul.w	r2, r2, r3
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <controlButton+0x51c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4413      	add	r3, r2
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <controlButton+0x51c>)
 8000724:	6013      	str	r3, [r2, #0]
			increaseGreen = 0;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <controlButton+0x518>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
		}
		break;
 800072c:	e005      	b.n	800073a <controlButton+0x4ee>
	default:
		break;
 800072e:	bf00      	nop
 8000730:	e004      	b.n	800073c <controlButton+0x4f0>
		break;
 8000732:	bf00      	nop
 8000734:	e002      	b.n	800073c <controlButton+0x4f0>
		break;
 8000736:	bf00      	nop
 8000738:	e000      	b.n	800073c <controlButton+0x4f0>
		break;
 800073a:	bf00      	nop
	}
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40010800 	.word	0x40010800
 8000744:	200000f0 	.word	0x200000f0
 8000748:	200000ac 	.word	0x200000ac
 800074c:	20000010 	.word	0x20000010
 8000750:	10624dd3 	.word	0x10624dd3
 8000754:	66666667 	.word	0x66666667
 8000758:	200000b4 	.word	0x200000b4
 800075c:	200000b8 	.word	0x200000b8
 8000760:	200000a4 	.word	0x200000a4
 8000764:	200000b0 	.word	0x200000b0
 8000768:	2000000c 	.word	0x2000000c

0800076c <fsm_automatic_1_run>:

void fsm_automatic_1_run()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	if(isButtonNPressed(0) == 1)
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fa0f 	bl	8000b94 <isButtonNPressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d104      	bne.n	8000786 <fsm_automatic_1_run+0x1a>
		mode++;
 800077c:	4b76      	ldr	r3, [pc, #472]	; (8000958 <fsm_automatic_1_run+0x1ec>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a75      	ldr	r2, [pc, #468]	; (8000958 <fsm_automatic_1_run+0x1ec>)
 8000784:	6013      	str	r3, [r2, #0]

	if(mode == 1)	///// STATE NORMAL
 8000786:	4b74      	ldr	r3, [pc, #464]	; (8000958 <fsm_automatic_1_run+0x1ec>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	f040 80de 	bne.w	800094c <fsm_automatic_1_run+0x1e0>
	{
		switch(status_1)
 8000790:	4b72      	ldr	r3, [pc, #456]	; (800095c <fsm_automatic_1_run+0x1f0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	2b03      	cmp	r3, #3
 8000798:	f200 80a7 	bhi.w	80008ea <fsm_automatic_1_run+0x17e>
 800079c:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <fsm_automatic_1_run+0x38>)
 800079e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a2:	bf00      	nop
 80007a4:	080007b5 	.word	0x080007b5
 80007a8:	08000801 	.word	0x08000801
 80007ac:	0800084f 	.word	0x0800084f
 80007b0:	0800089d 	.word	0x0800089d
		{
		case INIT_1:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2120      	movs	r1, #32
 80007b8:	4869      	ldr	r0, [pc, #420]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 80007ba:	f001 fbe8 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);
 80007be:	2201      	movs	r2, #1
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	4867      	ldr	r0, [pc, #412]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 80007c4:	f001 fbe3 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2140      	movs	r1, #64	; 0x40
 80007cc:	4864      	ldr	r0, [pc, #400]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 80007ce:	f001 fbde 	bl	8001f8e <HAL_GPIO_WritePin>

			status_1 = AUTO_RED_1;
 80007d2:	4b62      	ldr	r3, [pc, #392]	; (800095c <fsm_automatic_1_run+0x1f0>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
			setTimer1(timered);
 80007d8:	4b62      	ldr	r3, [pc, #392]	; (8000964 <fsm_automatic_1_run+0x1f8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 ff95 	bl	800170c <setTimer1>

			setTimer3(1000);
 80007e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e6:	f000 ffc5 	bl	8001774 <setTimer3>
			count1 = timered / 1000;
 80007ea:	4b5e      	ldr	r3, [pc, #376]	; (8000964 <fsm_automatic_1_run+0x1f8>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a5e      	ldr	r2, [pc, #376]	; (8000968 <fsm_automatic_1_run+0x1fc>)
 80007f0:	fb82 1203 	smull	r1, r2, r2, r3
 80007f4:	1192      	asrs	r2, r2, #6
 80007f6:	17db      	asrs	r3, r3, #31
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	4a5c      	ldr	r2, [pc, #368]	; (800096c <fsm_automatic_1_run+0x200>)
 80007fc:	6013      	str	r3, [r2, #0]
			break;
 80007fe:	e07b      	b.n	80008f8 <fsm_automatic_1_run+0x18c>
		case AUTO_RED_1:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2120      	movs	r1, #32
 8000804:	4856      	ldr	r0, [pc, #344]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 8000806:	f001 fbc2 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);
 800080a:	2201      	movs	r2, #1
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	4854      	ldr	r0, [pc, #336]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 8000810:	f001 fbbd 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	2140      	movs	r1, #64	; 0x40
 8000818:	4851      	ldr	r0, [pc, #324]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 800081a:	f001 fbb8 	bl	8001f8e <HAL_GPIO_WritePin>

			if(timer1_flag == 1)
 800081e:	4b54      	ldr	r3, [pc, #336]	; (8000970 <fsm_automatic_1_run+0x204>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d163      	bne.n	80008ee <fsm_automatic_1_run+0x182>
			{
				setTimer1(timegreen);
 8000826:	4b53      	ldr	r3, [pc, #332]	; (8000974 <fsm_automatic_1_run+0x208>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 ff6e 	bl	800170c <setTimer1>
				count1 = timegreen/1000 + 1;
 8000830:	4b50      	ldr	r3, [pc, #320]	; (8000974 <fsm_automatic_1_run+0x208>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a4c      	ldr	r2, [pc, #304]	; (8000968 <fsm_automatic_1_run+0x1fc>)
 8000836:	fb82 1203 	smull	r1, r2, r2, r3
 800083a:	1192      	asrs	r2, r2, #6
 800083c:	17db      	asrs	r3, r3, #31
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	3301      	adds	r3, #1
 8000842:	4a4a      	ldr	r2, [pc, #296]	; (800096c <fsm_automatic_1_run+0x200>)
 8000844:	6013      	str	r3, [r2, #0]
				status_1 = AUTO_GREEN_1;
 8000846:	4b45      	ldr	r3, [pc, #276]	; (800095c <fsm_automatic_1_run+0x1f0>)
 8000848:	2203      	movs	r2, #3
 800084a:	601a      	str	r2, [r3, #0]
			}
			break;
 800084c:	e04f      	b.n	80008ee <fsm_automatic_1_run+0x182>
		case AUTO_GREEN_1:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	2120      	movs	r1, #32
 8000852:	4843      	ldr	r0, [pc, #268]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 8000854:	f001 fb9b 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	4840      	ldr	r0, [pc, #256]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 800085e:	f001 fb96 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	483e      	ldr	r0, [pc, #248]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 8000868:	f001 fb91 	bl	8001f8e <HAL_GPIO_WritePin>

			if(timer1_flag == 1)
 800086c:	4b40      	ldr	r3, [pc, #256]	; (8000970 <fsm_automatic_1_run+0x204>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d13e      	bne.n	80008f2 <fsm_automatic_1_run+0x186>
			{
				setTimer1(timeyellow);
 8000874:	4b40      	ldr	r3, [pc, #256]	; (8000978 <fsm_automatic_1_run+0x20c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f000 ff47 	bl	800170c <setTimer1>
				count1 = timeyellow/1000 + 1;
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <fsm_automatic_1_run+0x20c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a39      	ldr	r2, [pc, #228]	; (8000968 <fsm_automatic_1_run+0x1fc>)
 8000884:	fb82 1203 	smull	r1, r2, r2, r3
 8000888:	1192      	asrs	r2, r2, #6
 800088a:	17db      	asrs	r3, r3, #31
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	3301      	adds	r3, #1
 8000890:	4a36      	ldr	r2, [pc, #216]	; (800096c <fsm_automatic_1_run+0x200>)
 8000892:	6013      	str	r3, [r2, #0]
				status_1 = AUTO_YELLOW_1;
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <fsm_automatic_1_run+0x1f0>)
 8000896:	2204      	movs	r2, #4
 8000898:	601a      	str	r2, [r3, #0]
			}
			break;
 800089a:	e02a      	b.n	80008f2 <fsm_automatic_1_run+0x186>
		case AUTO_YELLOW_1:
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, 1);
 800089c:	2201      	movs	r2, #1
 800089e:	2120      	movs	r1, #32
 80008a0:	482f      	ldr	r0, [pc, #188]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 80008a2:	f001 fb74 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, 1);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	482d      	ldr	r0, [pc, #180]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 80008ac:	f001 fb6f 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	482a      	ldr	r0, [pc, #168]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 80008b6:	f001 fb6a 	bl	8001f8e <HAL_GPIO_WritePin>

			if(timer1_flag == 1)
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <fsm_automatic_1_run+0x204>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d119      	bne.n	80008f6 <fsm_automatic_1_run+0x18a>
			{
				setTimer1(timered);
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <fsm_automatic_1_run+0x1f8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 ff20 	bl	800170c <setTimer1>
				count1 = timered/1000 + 1;
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <fsm_automatic_1_run+0x1f8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a25      	ldr	r2, [pc, #148]	; (8000968 <fsm_automatic_1_run+0x1fc>)
 80008d2:	fb82 1203 	smull	r1, r2, r2, r3
 80008d6:	1192      	asrs	r2, r2, #6
 80008d8:	17db      	asrs	r3, r3, #31
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	3301      	adds	r3, #1
 80008de:	4a23      	ldr	r2, [pc, #140]	; (800096c <fsm_automatic_1_run+0x200>)
 80008e0:	6013      	str	r3, [r2, #0]
				status_1 = AUTO_RED_1;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <fsm_automatic_1_run+0x1f0>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	601a      	str	r2, [r3, #0]
			}
			break;
 80008e8:	e005      	b.n	80008f6 <fsm_automatic_1_run+0x18a>
		default:
			break;
 80008ea:	bf00      	nop
 80008ec:	e004      	b.n	80008f8 <fsm_automatic_1_run+0x18c>
			break;
 80008ee:	bf00      	nop
 80008f0:	e002      	b.n	80008f8 <fsm_automatic_1_run+0x18c>
			break;
 80008f2:	bf00      	nop
 80008f4:	e000      	b.n	80008f8 <fsm_automatic_1_run+0x18c>
			break;
 80008f6:	bf00      	nop
		}

		subcount1();
 80008f8:	f7ff fc28 	bl	800014c <subcount1>
		update();
 80008fc:	f7ff fc8a 	bl	8000214 <update>

		if(index_led == 0)
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <fsm_automatic_1_run+0x210>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d110      	bne.n	800092a <fsm_automatic_1_run+0x1be>
		{
			display7SEG_1(count[1]);
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <fsm_automatic_1_run+0x214>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fb23 	bl	8000f58 <display7SEG_1>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);	// seg 1 off
 8000912:	2201      	movs	r2, #1
 8000914:	2110      	movs	r1, #16
 8000916:	4812      	ldr	r0, [pc, #72]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 8000918:	f001 fb39 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);	// seg 2 on
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000922:	480f      	ldr	r0, [pc, #60]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 8000924:	f001 fb33 	bl	8001f8e <HAL_GPIO_WritePin>
	else
	{
		update();
		controlButton();
	}
}
 8000928:	e014      	b.n	8000954 <fsm_automatic_1_run+0x1e8>
			display7SEG_1(count[0]);
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <fsm_automatic_1_run+0x214>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fb12 	bl	8000f58 <display7SEG_1>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);	// seg 1 on
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 800093a:	f001 fb28 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);	// seg 2 off
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <fsm_automatic_1_run+0x1f4>)
 8000946:	f001 fb22 	bl	8001f8e <HAL_GPIO_WritePin>
}
 800094a:	e003      	b.n	8000954 <fsm_automatic_1_run+0x1e8>
		update();
 800094c:	f7ff fc62 	bl	8000214 <update>
		controlButton();
 8000950:	f7ff fc7c 	bl	800024c <controlButton>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000024 	.word	0x20000024
 800095c:	20000028 	.word	0x20000028
 8000960:	40010800 	.word	0x40010800
 8000964:	20000008 	.word	0x20000008
 8000968:	10624dd3 	.word	0x10624dd3
 800096c:	20000000 	.word	0x20000000
 8000970:	200000c8 	.word	0x200000c8
 8000974:	2000000c 	.word	0x2000000c
 8000978:	20000010 	.word	0x20000010
 800097c:	200000a4 	.word	0x200000a4
 8000980:	20000014 	.word	0x20000014

08000984 <fsm_automatic_2_run>:

void fsm_automatic_2_run()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	if(mode == 1)
 8000988:	4b77      	ldr	r3, [pc, #476]	; (8000b68 <fsm_automatic_2_run+0x1e4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	f040 80e9 	bne.w	8000b64 <fsm_automatic_2_run+0x1e0>
	{
		switch(status_2)
 8000992:	4b76      	ldr	r3, [pc, #472]	; (8000b6c <fsm_automatic_2_run+0x1e8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	2b03      	cmp	r3, #3
 800099a:	f200 80b5 	bhi.w	8000b08 <fsm_automatic_2_run+0x184>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <fsm_automatic_2_run+0x20>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	08000a0d 	.word	0x08000a0d
 80009ac:	08000a61 	.word	0x08000a61
 80009b0:	08000ab5 	.word	0x08000ab5
		{
		case INIT_2:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ba:	486d      	ldr	r0, [pc, #436]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 80009bc:	f001 fae7 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	486a      	ldr	r0, [pc, #424]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 80009c8:	f001 fae1 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d2:	4867      	ldr	r0, [pc, #412]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 80009d4:	f001 fadb 	bl	8001f8e <HAL_GPIO_WritePin>

			status_2 = AUTO_GREEN_2;
 80009d8:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <fsm_automatic_2_run+0x1e8>)
 80009da:	2203      	movs	r2, #3
 80009dc:	601a      	str	r2, [r3, #0]
			setTimer2(timegreen);
 80009de:	4b65      	ldr	r3, [pc, #404]	; (8000b74 <fsm_automatic_2_run+0x1f0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 feac 	bl	8001740 <setTimer2>

			setTimer4(1000);
 80009e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ec:	f000 fedc 	bl	80017a8 <setTimer4>
			count2 = timegreen/1000;
 80009f0:	4b60      	ldr	r3, [pc, #384]	; (8000b74 <fsm_automatic_2_run+0x1f0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a60      	ldr	r2, [pc, #384]	; (8000b78 <fsm_automatic_2_run+0x1f4>)
 80009f6:	fb82 1203 	smull	r1, r2, r2, r3
 80009fa:	1192      	asrs	r2, r2, #6
 80009fc:	17db      	asrs	r3, r3, #31
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4a5e      	ldr	r2, [pc, #376]	; (8000b7c <fsm_automatic_2_run+0x1f8>)
 8000a02:	6013      	str	r3, [r2, #0]

			isButtonNPressed(0);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 f8c5 	bl	8000b94 <isButtonNPressed>
			break;
 8000a0a:	e084      	b.n	8000b16 <fsm_automatic_2_run+0x192>
		case AUTO_RED_2:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	4857      	ldr	r0, [pc, #348]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000a14:	f001 fabb 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1e:	4854      	ldr	r0, [pc, #336]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000a20:	f001 fab5 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2a:	4851      	ldr	r0, [pc, #324]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000a2c:	f001 faaf 	bl	8001f8e <HAL_GPIO_WritePin>

			if(timer2_flag == 1)
 8000a30:	4b53      	ldr	r3, [pc, #332]	; (8000b80 <fsm_automatic_2_run+0x1fc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d169      	bne.n	8000b0c <fsm_automatic_2_run+0x188>
			{
				setTimer2(timegreen);
 8000a38:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <fsm_automatic_2_run+0x1f0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fe7f 	bl	8001740 <setTimer2>
				count2 = timegreen/1000 + 1;
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <fsm_automatic_2_run+0x1f0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a4c      	ldr	r2, [pc, #304]	; (8000b78 <fsm_automatic_2_run+0x1f4>)
 8000a48:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4c:	1192      	asrs	r2, r2, #6
 8000a4e:	17db      	asrs	r3, r3, #31
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <fsm_automatic_2_run+0x1f8>)
 8000a56:	6013      	str	r3, [r2, #0]
				status_2 = AUTO_GREEN_2;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <fsm_automatic_2_run+0x1e8>)
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a5e:	e055      	b.n	8000b0c <fsm_automatic_2_run+0x188>
		case AUTO_GREEN_2:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a66:	4842      	ldr	r0, [pc, #264]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000a68:	f001 fa91 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a72:	483f      	ldr	r0, [pc, #252]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000a74:	f001 fa8b 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	483c      	ldr	r0, [pc, #240]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000a80:	f001 fa85 	bl	8001f8e <HAL_GPIO_WritePin>

			if(timer2_flag == 1)
 8000a84:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <fsm_automatic_2_run+0x1fc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d141      	bne.n	8000b10 <fsm_automatic_2_run+0x18c>
			{
				setTimer2(timeyellow);
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <fsm_automatic_2_run+0x200>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fe55 	bl	8001740 <setTimer2>
				count2 = timeyellow/1000 + 1;
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <fsm_automatic_2_run+0x200>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <fsm_automatic_2_run+0x1f4>)
 8000a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa0:	1192      	asrs	r2, r2, #6
 8000aa2:	17db      	asrs	r3, r3, #31
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4a34      	ldr	r2, [pc, #208]	; (8000b7c <fsm_automatic_2_run+0x1f8>)
 8000aaa:	6013      	str	r3, [r2, #0]
				status_2 = AUTO_YELLOW_2;
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <fsm_automatic_2_run+0x1e8>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ab2:	e02d      	b.n	8000b10 <fsm_automatic_2_run+0x18c>
		case AUTO_YELLOW_2:
			HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aba:	482d      	ldr	r0, [pc, #180]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000abc:	f001 fa67 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, 1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac6:	482a      	ldr	r0, [pc, #168]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000ac8:	f001 fa61 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad2:	4827      	ldr	r0, [pc, #156]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000ad4:	f001 fa5b 	bl	8001f8e <HAL_GPIO_WritePin>

			if(timer2_flag == 1)
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <fsm_automatic_2_run+0x1fc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d119      	bne.n	8000b14 <fsm_automatic_2_run+0x190>
			{
				setTimer2(timered);
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <fsm_automatic_2_run+0x204>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fe2b 	bl	8001740 <setTimer2>
				count2 = timered/1000 + 1;
 8000aea:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <fsm_automatic_2_run+0x204>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <fsm_automatic_2_run+0x1f4>)
 8000af0:	fb82 1203 	smull	r1, r2, r2, r3
 8000af4:	1192      	asrs	r2, r2, #6
 8000af6:	17db      	asrs	r3, r3, #31
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <fsm_automatic_2_run+0x1f8>)
 8000afe:	6013      	str	r3, [r2, #0]
				status_2 = AUTO_RED_2;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <fsm_automatic_2_run+0x1e8>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b06:	e005      	b.n	8000b14 <fsm_automatic_2_run+0x190>
		default:
			break;
 8000b08:	bf00      	nop
 8000b0a:	e004      	b.n	8000b16 <fsm_automatic_2_run+0x192>
			break;
 8000b0c:	bf00      	nop
 8000b0e:	e002      	b.n	8000b16 <fsm_automatic_2_run+0x192>
			break;
 8000b10:	bf00      	nop
 8000b12:	e000      	b.n	8000b16 <fsm_automatic_2_run+0x192>
			break;
 8000b14:	bf00      	nop
		}

		subcount2();
 8000b16:	f7ff fb4b 	bl	80001b0 <subcount2>
		update();
 8000b1a:	f7ff fb7b 	bl	8000214 <update>

		if(index_led == 0)
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <fsm_automatic_2_run+0x208>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10f      	bne.n	8000b46 <fsm_automatic_2_run+0x1c2>
		{
			display7SEG_2(count[3]);
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <fsm_automatic_2_run+0x20c>)
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fb9a 	bl	8001264 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 off
 8000b30:	2201      	movs	r2, #1
 8000b32:	2104      	movs	r1, #4
 8000b34:	480e      	ldr	r0, [pc, #56]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000b36:	f001 fa2a 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 on
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000b40:	f001 fa25 	bl	8001f8e <HAL_GPIO_WritePin>
			display7SEG_2(count[2]);
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 on
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 off
		}
	}
}
 8000b44:	e00e      	b.n	8000b64 <fsm_automatic_2_run+0x1e0>
			display7SEG_2(count[2]);
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <fsm_automatic_2_run+0x20c>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fb8a 	bl	8001264 <display7SEG_2>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 on
 8000b50:	2200      	movs	r2, #0
 8000b52:	2104      	movs	r1, #4
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000b56:	f001 fa1a 	bl	8001f8e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 off
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <fsm_automatic_2_run+0x1ec>)
 8000b60:	f001 fa15 	bl	8001f8e <HAL_GPIO_WritePin>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000024 	.word	0x20000024
 8000b6c:	2000002c 	.word	0x2000002c
 8000b70:	40010800 	.word	0x40010800
 8000b74:	2000000c 	.word	0x2000000c
 8000b78:	10624dd3 	.word	0x10624dd3
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	200000d0 	.word	0x200000d0
 8000b84:	20000010 	.word	0x20000010
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	200000a4 	.word	0x200000a4
 8000b90:	20000014 	.word	0x20000014

08000b94 <isButtonNPressed>:
int KeyReg2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimerForKeyPress[3] = {300, 300, 300};

int isButtonNPressed(int index) {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if (buttonN_flag[index] == 1) {
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <isButtonNPressed+0x30>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d106      	bne.n	8000bb6 <isButtonNPressed+0x22>
		buttonN_flag[index] = 0;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <isButtonNPressed+0x30>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2100      	movs	r1, #0
 8000bae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <isButtonNPressed+0x24>
	}
	return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200000bc 	.word	0x200000bc

08000bc8 <subKeyProcess>:
void subKeyProcess(int index) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	buttonN_flag[index] = 1;
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <subKeyProcess+0x1c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	200000bc 	.word	0x200000bc

08000be8 <getKeyInput>:

void getKeyInput() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTONS; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	e074      	b.n	8000cde <getKeyInput+0xf6>
	{
		KeyReg0[i] = KeyReg1[i];
 8000bf4:	4a3e      	ldr	r2, [pc, #248]	; (8000cf0 <getKeyInput+0x108>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bfc:	493d      	ldr	r1, [pc, #244]	; (8000cf4 <getKeyInput+0x10c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000c04:	4a3c      	ldr	r2, [pc, #240]	; (8000cf8 <getKeyInput+0x110>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0c:	4938      	ldr	r1, [pc, #224]	; (8000cf0 <getKeyInput+0x108>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(GPIOA, buttonN_PIN[i]);
 8000c14:	4a39      	ldr	r2, [pc, #228]	; (8000cfc <getKeyInput+0x114>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4837      	ldr	r0, [pc, #220]	; (8000d00 <getKeyInput+0x118>)
 8000c22:	f001 f99d 	bl	8001f60 <HAL_GPIO_ReadPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4a33      	ldr	r2, [pc, #204]	; (8000cf8 <getKeyInput+0x110>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i]))
 8000c32:	4a30      	ldr	r2, [pc, #192]	; (8000cf4 <getKeyInput+0x10c>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c3a:	492d      	ldr	r1, [pc, #180]	; (8000cf0 <getKeyInput+0x108>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d148      	bne.n	8000cd8 <getKeyInput+0xf0>
 8000c46:	4a2a      	ldr	r2, [pc, #168]	; (8000cf0 <getKeyInput+0x108>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c4e:	492a      	ldr	r1, [pc, #168]	; (8000cf8 <getKeyInput+0x110>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d13e      	bne.n	8000cd8 <getKeyInput+0xf0>
		{
			if (KeyReg3[i] != KeyReg2[i])
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <getKeyInput+0x11c>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c62:	4925      	ldr	r1, [pc, #148]	; (8000cf8 <getKeyInput+0x110>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d017      	beq.n	8000c9e <getKeyInput+0xb6>
			{
				KeyReg3[i] = KeyReg2[i];
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <getKeyInput+0x110>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c76:	4923      	ldr	r1, [pc, #140]	; (8000d04 <getKeyInput+0x11c>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE)
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <getKeyInput+0x110>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d126      	bne.n	8000cd8 <getKeyInput+0xf0>
				{
					subKeyProcess(i);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff9c 	bl	8000bc8 <subKeyProcess>
					TimerForKeyPress[i] = 300;
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <getKeyInput+0x120>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c9c:	e01c      	b.n	8000cd8 <getKeyInput+0xf0>
				}
			}
			else
			{
				TimerForKeyPress[i]--;
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <getKeyInput+0x120>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca6:	1e5a      	subs	r2, r3, #1
 8000ca8:	4917      	ldr	r1, [pc, #92]	; (8000d08 <getKeyInput+0x120>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0)
 8000cb0:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <getKeyInput+0x120>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10d      	bne.n	8000cd8 <getKeyInput+0xf0>
				{
					if(KeyReg2[i] == PRESSED_STATE)
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <getKeyInput+0x110>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <getKeyInput+0xe6>
						subKeyProcess(i);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff7d 	bl	8000bc8 <subKeyProcess>

					TimerForKeyPress[i] = 100;
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <getKeyInput+0x120>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2164      	movs	r1, #100	; 0x64
 8000cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTONS; i++)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	dd87      	ble.n	8000bf4 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000048 	.word	0x20000048
 8000cf4:	2000003c 	.word	0x2000003c
 8000cf8:	20000054 	.word	0x20000054
 8000cfc:	20000030 	.word	0x20000030
 8000d00:	40010800 	.word	0x40010800
 8000d04:	20000060 	.word	0x20000060
 8000d08:	2000006c 	.word	0x2000006c

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fe3c 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f822 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 f8a8 	bl	8000e6c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d1c:	f000 f85a 	bl	8000dd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <main+0x3c>)
 8000d22:	f001 fd91 	bl	8002848 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timer5_flag = 1;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <main+0x40>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
    timer6_flag = 1;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <main+0x44>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]

    status_1 = INIT_1;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <main+0x48>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
    status_2 = INIT_2;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <main+0x4c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
    while (1)
    {
  	  fsm_automatic_1_run();
 8000d3e:	f7ff fd15 	bl	800076c <fsm_automatic_1_run>
  	  fsm_automatic_2_run();
 8000d42:	f7ff fe1f 	bl	8000984 <fsm_automatic_2_run>
    {
 8000d46:	e7fa      	b.n	8000d3e <main+0x32>
 8000d48:	200000f8 	.word	0x200000f8
 8000d4c:	200000e8 	.word	0x200000e8
 8000d50:	200000f0 	.word	0x200000f0
 8000d54:	20000028 	.word	0x20000028
 8000d58:	2000002c 	.word	0x2000002c

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b090      	sub	sp, #64	; 0x40
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	2228      	movs	r2, #40	; 0x28
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 f928 	bl	8002fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d86:	2310      	movs	r3, #16
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 f92c 	bl	8001ff0 <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d9e:	f000 f8d5 	bl	8000f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fb98 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dc6:	f000 f8c1 	bl	8000f4c <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3740      	adds	r7, #64	; 0x40
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	463b      	mov	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000dfa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e08:	2209      	movs	r2, #9
 8000e0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e18:	4813      	ldr	r0, [pc, #76]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e1a:	f001 fcc5 	bl	80027a8 <HAL_TIM_Base_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e24:	f000 f892 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e36:	f001 fe5b 	bl	8002af0 <HAL_TIM_ConfigClockSource>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e40:	f000 f884 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_TIM2_Init+0x94>)
 8000e52:	f002 f827 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e5c:	f000 f876 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200000f8 	.word	0x200000f8

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <MX_GPIO_Init+0xbc>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <MX_GPIO_Init+0xbc>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <MX_GPIO_Init+0xbc>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <MX_GPIO_Init+0xbc>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <MX_GPIO_Init+0xbc>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <MX_GPIO_Init+0xbc>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|RED_1_Pin
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f640 71fc 	movw	r1, #4092	; 0xffc
 8000eb6:	481d      	ldr	r0, [pc, #116]	; (8000f2c <MX_GPIO_Init+0xc0>)
 8000eb8:	f001 f869 	bl	8001f8e <HAL_GPIO_WritePin>
                          |YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin|YELLOW_2_Pin
                          |GREEN_2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D2_Pin
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000ec2:	481b      	ldr	r0, [pc, #108]	; (8000f30 <MX_GPIO_Init+0xc4>)
 8000ec4:	f001 f863 	bl	8001f8e <HAL_GPIO_WritePin>
                          |B2_Pin|C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin RED_1_Pin
                           YELLOW_1_Pin GREEN_1_Pin RED_2_Pin YELLOW_2_Pin
                           GREEN_2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|RED_1_Pin
 8000ec8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ecc:	60bb      	str	r3, [r7, #8]
                          |YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin|YELLOW_2_Pin
                          |GREEN_2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MX_GPIO_Init+0xc0>)
 8000ee2:	f000 fec3 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin D_Pin
                           E_Pin F_Pin G_Pin A2_Pin
                           B2_Pin C2_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D2_Pin
 8000ee6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000eea:	60bb      	str	r3, [r7, #8]
                          |E2_Pin|F2_Pin|G2_Pin|D_Pin
                          |E_Pin|F_Pin|G_Pin|A2_Pin
                          |B2_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_GPIO_Init+0xc4>)
 8000f00:	f000 feb4 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000f04:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	4619      	mov	r1, r3
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_GPIO_Init+0xc0>)
 8000f1a:	f000 fea7 	bl	8001c6c <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	timeRun();
 8000f3c:	f000 fc82 	bl	8001844 <timeRun>
	getKeyInput();
 8000f40:	f7ff fe52 	bl	8000be8 <getKeyInput>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <display7SEG_1>:
 */
#include "output_display.h"

/* display seg 1*/
void display7SEG_1(int num)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if (num == 0)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d122      	bne.n	8000fac <display7SEG_1+0x54>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2101      	movs	r1, #1
 8000f6a:	48bd      	ldr	r0, [pc, #756]	; (8001260 <display7SEG_1+0x308>)
 8000f6c:	f001 f80f 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2102      	movs	r1, #2
 8000f74:	48ba      	ldr	r0, [pc, #744]	; (8001260 <display7SEG_1+0x308>)
 8000f76:	f001 f80a 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	48b8      	ldr	r0, [pc, #736]	; (8001260 <display7SEG_1+0x308>)
 8000f80:	f001 f805 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2108      	movs	r1, #8
 8000f88:	48b5      	ldr	r0, [pc, #724]	; (8001260 <display7SEG_1+0x308>)
 8000f8a:	f001 f800 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2110      	movs	r1, #16
 8000f92:	48b3      	ldr	r0, [pc, #716]	; (8001260 <display7SEG_1+0x308>)
 8000f94:	f000 fffb 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	48b0      	ldr	r0, [pc, #704]	; (8001260 <display7SEG_1+0x308>)
 8000f9e:	f000 fff6 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	48ae      	ldr	r0, [pc, #696]	; (8001260 <display7SEG_1+0x308>)
 8000fa8:	f000 fff1 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d122      	bne.n	8000ff8 <display7SEG_1+0xa0>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,1);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	48aa      	ldr	r0, [pc, #680]	; (8001260 <display7SEG_1+0x308>)
 8000fb8:	f000 ffe9 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	48a7      	ldr	r0, [pc, #668]	; (8001260 <display7SEG_1+0x308>)
 8000fc2:	f000 ffe4 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2104      	movs	r1, #4
 8000fca:	48a5      	ldr	r0, [pc, #660]	; (8001260 <display7SEG_1+0x308>)
 8000fcc:	f000 ffdf 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	48a2      	ldr	r0, [pc, #648]	; (8001260 <display7SEG_1+0x308>)
 8000fd6:	f000 ffda 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2110      	movs	r1, #16
 8000fde:	48a0      	ldr	r0, [pc, #640]	; (8001260 <display7SEG_1+0x308>)
 8000fe0:	f000 ffd5 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	489d      	ldr	r0, [pc, #628]	; (8001260 <display7SEG_1+0x308>)
 8000fea:	f000 ffd0 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2140      	movs	r1, #64	; 0x40
 8000ff2:	489b      	ldr	r0, [pc, #620]	; (8001260 <display7SEG_1+0x308>)
 8000ff4:	f000 ffcb 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d122      	bne.n	8001044 <display7SEG_1+0xec>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2101      	movs	r1, #1
 8001002:	4897      	ldr	r0, [pc, #604]	; (8001260 <display7SEG_1+0x308>)
 8001004:	f000 ffc3 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8001008:	2200      	movs	r2, #0
 800100a:	2102      	movs	r1, #2
 800100c:	4894      	ldr	r0, [pc, #592]	; (8001260 <display7SEG_1+0x308>)
 800100e:	f000 ffbe 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,1);
 8001012:	2201      	movs	r2, #1
 8001014:	2104      	movs	r1, #4
 8001016:	4892      	ldr	r0, [pc, #584]	; (8001260 <display7SEG_1+0x308>)
 8001018:	f000 ffb9 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 800101c:	2200      	movs	r2, #0
 800101e:	2108      	movs	r1, #8
 8001020:	488f      	ldr	r0, [pc, #572]	; (8001260 <display7SEG_1+0x308>)
 8001022:	f000 ffb4 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8001026:	2200      	movs	r2, #0
 8001028:	2110      	movs	r1, #16
 800102a:	488d      	ldr	r0, [pc, #564]	; (8001260 <display7SEG_1+0x308>)
 800102c:	f000 ffaf 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 8001030:	2201      	movs	r2, #1
 8001032:	2120      	movs	r1, #32
 8001034:	488a      	ldr	r0, [pc, #552]	; (8001260 <display7SEG_1+0x308>)
 8001036:	f000 ffaa 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4888      	ldr	r0, [pc, #544]	; (8001260 <display7SEG_1+0x308>)
 8001040:	f000 ffa5 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d122      	bne.n	8001090 <display7SEG_1+0x138>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800104a:	2200      	movs	r2, #0
 800104c:	2101      	movs	r1, #1
 800104e:	4884      	ldr	r0, [pc, #528]	; (8001260 <display7SEG_1+0x308>)
 8001050:	f000 ff9d 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8001054:	2200      	movs	r2, #0
 8001056:	2102      	movs	r1, #2
 8001058:	4881      	ldr	r0, [pc, #516]	; (8001260 <display7SEG_1+0x308>)
 800105a:	f000 ff98 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 800105e:	2200      	movs	r2, #0
 8001060:	2104      	movs	r1, #4
 8001062:	487f      	ldr	r0, [pc, #508]	; (8001260 <display7SEG_1+0x308>)
 8001064:	f000 ff93 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8001068:	2200      	movs	r2, #0
 800106a:	2108      	movs	r1, #8
 800106c:	487c      	ldr	r0, [pc, #496]	; (8001260 <display7SEG_1+0x308>)
 800106e:	f000 ff8e 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8001072:	2201      	movs	r2, #1
 8001074:	2110      	movs	r1, #16
 8001076:	487a      	ldr	r0, [pc, #488]	; (8001260 <display7SEG_1+0x308>)
 8001078:	f000 ff89 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 800107c:	2201      	movs	r2, #1
 800107e:	2120      	movs	r1, #32
 8001080:	4877      	ldr	r0, [pc, #476]	; (8001260 <display7SEG_1+0x308>)
 8001082:	f000 ff84 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 8001086:	2200      	movs	r2, #0
 8001088:	2140      	movs	r1, #64	; 0x40
 800108a:	4875      	ldr	r0, [pc, #468]	; (8001260 <display7SEG_1+0x308>)
 800108c:	f000 ff7f 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 4)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b04      	cmp	r3, #4
 8001094:	d122      	bne.n	80010dc <display7SEG_1+0x184>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,1);
 8001096:	2201      	movs	r2, #1
 8001098:	2101      	movs	r1, #1
 800109a:	4871      	ldr	r0, [pc, #452]	; (8001260 <display7SEG_1+0x308>)
 800109c:	f000 ff77 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2102      	movs	r1, #2
 80010a4:	486e      	ldr	r0, [pc, #440]	; (8001260 <display7SEG_1+0x308>)
 80010a6:	f000 ff72 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2104      	movs	r1, #4
 80010ae:	486c      	ldr	r0, [pc, #432]	; (8001260 <display7SEG_1+0x308>)
 80010b0:	f000 ff6d 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2108      	movs	r1, #8
 80010b8:	4869      	ldr	r0, [pc, #420]	; (8001260 <display7SEG_1+0x308>)
 80010ba:	f000 ff68 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 80010be:	2201      	movs	r2, #1
 80010c0:	2110      	movs	r1, #16
 80010c2:	4867      	ldr	r0, [pc, #412]	; (8001260 <display7SEG_1+0x308>)
 80010c4:	f000 ff63 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2120      	movs	r1, #32
 80010cc:	4864      	ldr	r0, [pc, #400]	; (8001260 <display7SEG_1+0x308>)
 80010ce:	f000 ff5e 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	4862      	ldr	r0, [pc, #392]	; (8001260 <display7SEG_1+0x308>)
 80010d8:	f000 ff59 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 5)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d122      	bne.n	8001128 <display7SEG_1+0x1d0>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	485e      	ldr	r0, [pc, #376]	; (8001260 <display7SEG_1+0x308>)
 80010e8:	f000 ff51 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,1);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	485b      	ldr	r0, [pc, #364]	; (8001260 <display7SEG_1+0x308>)
 80010f2:	f000 ff4c 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2104      	movs	r1, #4
 80010fa:	4859      	ldr	r0, [pc, #356]	; (8001260 <display7SEG_1+0x308>)
 80010fc:	f000 ff47 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8001100:	2200      	movs	r2, #0
 8001102:	2108      	movs	r1, #8
 8001104:	4856      	ldr	r0, [pc, #344]	; (8001260 <display7SEG_1+0x308>)
 8001106:	f000 ff42 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 800110a:	2201      	movs	r2, #1
 800110c:	2110      	movs	r1, #16
 800110e:	4854      	ldr	r0, [pc, #336]	; (8001260 <display7SEG_1+0x308>)
 8001110:	f000 ff3d 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8001114:	2200      	movs	r2, #0
 8001116:	2120      	movs	r1, #32
 8001118:	4851      	ldr	r0, [pc, #324]	; (8001260 <display7SEG_1+0x308>)
 800111a:	f000 ff38 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800111e:	2200      	movs	r2, #0
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	484f      	ldr	r0, [pc, #316]	; (8001260 <display7SEG_1+0x308>)
 8001124:	f000 ff33 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 6)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b06      	cmp	r3, #6
 800112c:	d122      	bne.n	8001174 <display7SEG_1+0x21c>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	484b      	ldr	r0, [pc, #300]	; (8001260 <display7SEG_1+0x308>)
 8001134:	f000 ff2b 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,1);
 8001138:	2201      	movs	r2, #1
 800113a:	2102      	movs	r1, #2
 800113c:	4848      	ldr	r0, [pc, #288]	; (8001260 <display7SEG_1+0x308>)
 800113e:	f000 ff26 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8001142:	2200      	movs	r2, #0
 8001144:	2104      	movs	r1, #4
 8001146:	4846      	ldr	r0, [pc, #280]	; (8001260 <display7SEG_1+0x308>)
 8001148:	f000 ff21 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 800114c:	2200      	movs	r2, #0
 800114e:	2108      	movs	r1, #8
 8001150:	4843      	ldr	r0, [pc, #268]	; (8001260 <display7SEG_1+0x308>)
 8001152:	f000 ff1c 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8001156:	2200      	movs	r2, #0
 8001158:	2110      	movs	r1, #16
 800115a:	4841      	ldr	r0, [pc, #260]	; (8001260 <display7SEG_1+0x308>)
 800115c:	f000 ff17 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8001160:	2200      	movs	r2, #0
 8001162:	2120      	movs	r1, #32
 8001164:	483e      	ldr	r0, [pc, #248]	; (8001260 <display7SEG_1+0x308>)
 8001166:	f000 ff12 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800116a:	2200      	movs	r2, #0
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	483c      	ldr	r0, [pc, #240]	; (8001260 <display7SEG_1+0x308>)
 8001170:	f000 ff0d 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 7)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b07      	cmp	r3, #7
 8001178:	d122      	bne.n	80011c0 <display7SEG_1+0x268>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800117a:	2200      	movs	r2, #0
 800117c:	2101      	movs	r1, #1
 800117e:	4838      	ldr	r0, [pc, #224]	; (8001260 <display7SEG_1+0x308>)
 8001180:	f000 ff05 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8001184:	2200      	movs	r2, #0
 8001186:	2102      	movs	r1, #2
 8001188:	4835      	ldr	r0, [pc, #212]	; (8001260 <display7SEG_1+0x308>)
 800118a:	f000 ff00 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 800118e:	2200      	movs	r2, #0
 8001190:	2104      	movs	r1, #4
 8001192:	4833      	ldr	r0, [pc, #204]	; (8001260 <display7SEG_1+0x308>)
 8001194:	f000 fefb 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 8001198:	2201      	movs	r2, #1
 800119a:	2108      	movs	r1, #8
 800119c:	4830      	ldr	r0, [pc, #192]	; (8001260 <display7SEG_1+0x308>)
 800119e:	f000 fef6 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2110      	movs	r1, #16
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <display7SEG_1+0x308>)
 80011a8:	f000 fef1 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2120      	movs	r1, #32
 80011b0:	482b      	ldr	r0, [pc, #172]	; (8001260 <display7SEG_1+0x308>)
 80011b2:	f000 feec 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	4829      	ldr	r0, [pc, #164]	; (8001260 <display7SEG_1+0x308>)
 80011bc:	f000 fee7 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 8)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d122      	bne.n	800120c <display7SEG_1+0x2b4>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2101      	movs	r1, #1
 80011ca:	4825      	ldr	r0, [pc, #148]	; (8001260 <display7SEG_1+0x308>)
 80011cc:	f000 fedf 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	4822      	ldr	r0, [pc, #136]	; (8001260 <display7SEG_1+0x308>)
 80011d6:	f000 feda 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2104      	movs	r1, #4
 80011de:	4820      	ldr	r0, [pc, #128]	; (8001260 <display7SEG_1+0x308>)
 80011e0:	f000 fed5 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2108      	movs	r1, #8
 80011e8:	481d      	ldr	r0, [pc, #116]	; (8001260 <display7SEG_1+0x308>)
 80011ea:	f000 fed0 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	481b      	ldr	r0, [pc, #108]	; (8001260 <display7SEG_1+0x308>)
 80011f4:	f000 fecb 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2120      	movs	r1, #32
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <display7SEG_1+0x308>)
 80011fe:	f000 fec6 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 8001202:	2200      	movs	r2, #0
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <display7SEG_1+0x308>)
 8001208:	f000 fec1 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 9)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b09      	cmp	r3, #9
 8001210:	d122      	bne.n	8001258 <display7SEG_1+0x300>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 8001212:	2200      	movs	r2, #0
 8001214:	2101      	movs	r1, #1
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <display7SEG_1+0x308>)
 8001218:	f000 feb9 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 800121c:	2200      	movs	r2, #0
 800121e:	2102      	movs	r1, #2
 8001220:	480f      	ldr	r0, [pc, #60]	; (8001260 <display7SEG_1+0x308>)
 8001222:	f000 feb4 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8001226:	2200      	movs	r2, #0
 8001228:	2104      	movs	r1, #4
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <display7SEG_1+0x308>)
 800122c:	f000 feaf 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8001230:	2200      	movs	r2, #0
 8001232:	2108      	movs	r1, #8
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <display7SEG_1+0x308>)
 8001236:	f000 feaa 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 800123a:	2201      	movs	r2, #1
 800123c:	2110      	movs	r1, #16
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <display7SEG_1+0x308>)
 8001240:	f000 fea5 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8001244:	2200      	movs	r2, #0
 8001246:	2120      	movs	r1, #32
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <display7SEG_1+0x308>)
 800124a:	f000 fea0 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800124e:	2200      	movs	r2, #0
 8001250:	2140      	movs	r1, #64	; 0x40
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <display7SEG_1+0x308>)
 8001254:	f000 fe9b 	bl	8001f8e <HAL_GPIO_WritePin>
	}
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40010c00 	.word	0x40010c00

08001264 <display7SEG_2>:

/* display seg 2*/
void display7SEG_2(int num)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	if (num == 0)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d128      	bne.n	80012c4 <display7SEG_2+0x60>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 8001272:	2200      	movs	r2, #0
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	48d2      	ldr	r0, [pc, #840]	; (80015c0 <display7SEG_2+0x35c>)
 8001278:	f000 fe89 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	48cf      	ldr	r0, [pc, #828]	; (80015c0 <display7SEG_2+0x35c>)
 8001284:	f000 fe83 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128e:	48cc      	ldr	r0, [pc, #816]	; (80015c0 <display7SEG_2+0x35c>)
 8001290:	f000 fe7d 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	48c9      	ldr	r0, [pc, #804]	; (80015c0 <display7SEG_2+0x35c>)
 800129c:	f000 fe77 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a6:	48c6      	ldr	r0, [pc, #792]	; (80015c0 <display7SEG_2+0x35c>)
 80012a8:	f000 fe71 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b2:	48c3      	ldr	r0, [pc, #780]	; (80015c0 <display7SEG_2+0x35c>)
 80012b4:	f000 fe6b 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	48c0      	ldr	r0, [pc, #768]	; (80015c0 <display7SEG_2+0x35c>)
 80012c0:	f000 fe65 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d128      	bne.n	800131c <display7SEG_2+0xb8>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	48bc      	ldr	r0, [pc, #752]	; (80015c0 <display7SEG_2+0x35c>)
 80012d0:	f000 fe5d 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012da:	48b9      	ldr	r0, [pc, #740]	; (80015c0 <display7SEG_2+0x35c>)
 80012dc:	f000 fe57 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e6:	48b6      	ldr	r0, [pc, #728]	; (80015c0 <display7SEG_2+0x35c>)
 80012e8:	f000 fe51 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f2:	48b3      	ldr	r0, [pc, #716]	; (80015c0 <display7SEG_2+0x35c>)
 80012f4:	f000 fe4b 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fe:	48b0      	ldr	r0, [pc, #704]	; (80015c0 <display7SEG_2+0x35c>)
 8001300:	f000 fe45 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,1);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130a:	48ad      	ldr	r0, [pc, #692]	; (80015c0 <display7SEG_2+0x35c>)
 800130c:	f000 fe3f 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,1);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	48aa      	ldr	r0, [pc, #680]	; (80015c0 <display7SEG_2+0x35c>)
 8001318:	f000 fe39 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d128      	bne.n	8001374 <display7SEG_2+0x110>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 8001322:	2200      	movs	r2, #0
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	48a6      	ldr	r0, [pc, #664]	; (80015c0 <display7SEG_2+0x35c>)
 8001328:	f000 fe31 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001332:	48a3      	ldr	r0, [pc, #652]	; (80015c0 <display7SEG_2+0x35c>)
 8001334:	f000 fe2b 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,1);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133e:	48a0      	ldr	r0, [pc, #640]	; (80015c0 <display7SEG_2+0x35c>)
 8001340:	f000 fe25 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134a:	489d      	ldr	r0, [pc, #628]	; (80015c0 <display7SEG_2+0x35c>)
 800134c:	f000 fe1f 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,0);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001356:	489a      	ldr	r0, [pc, #616]	; (80015c0 <display7SEG_2+0x35c>)
 8001358:	f000 fe19 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,1);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001362:	4897      	ldr	r0, [pc, #604]	; (80015c0 <display7SEG_2+0x35c>)
 8001364:	f000 fe13 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136e:	4894      	ldr	r0, [pc, #592]	; (80015c0 <display7SEG_2+0x35c>)
 8001370:	f000 fe0d 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b03      	cmp	r3, #3
 8001378:	d128      	bne.n	80013cc <display7SEG_2+0x168>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 800137a:	2200      	movs	r2, #0
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	4890      	ldr	r0, [pc, #576]	; (80015c0 <display7SEG_2+0x35c>)
 8001380:	f000 fe05 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138a:	488d      	ldr	r0, [pc, #564]	; (80015c0 <display7SEG_2+0x35c>)
 800138c:	f000 fdff 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001396:	488a      	ldr	r0, [pc, #552]	; (80015c0 <display7SEG_2+0x35c>)
 8001398:	f000 fdf9 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	4887      	ldr	r0, [pc, #540]	; (80015c0 <display7SEG_2+0x35c>)
 80013a4:	f000 fdf3 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ae:	4884      	ldr	r0, [pc, #528]	; (80015c0 <display7SEG_2+0x35c>)
 80013b0:	f000 fded 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ba:	4881      	ldr	r0, [pc, #516]	; (80015c0 <display7SEG_2+0x35c>)
 80013bc:	f000 fde7 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	487e      	ldr	r0, [pc, #504]	; (80015c0 <display7SEG_2+0x35c>)
 80013c8:	f000 fde1 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 4)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d128      	bne.n	8001424 <display7SEG_2+0x1c0>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,1);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	487a      	ldr	r0, [pc, #488]	; (80015c0 <display7SEG_2+0x35c>)
 80013d8:	f000 fdd9 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e2:	4877      	ldr	r0, [pc, #476]	; (80015c0 <display7SEG_2+0x35c>)
 80013e4:	f000 fdd3 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ee:	4874      	ldr	r0, [pc, #464]	; (80015c0 <display7SEG_2+0x35c>)
 80013f0:	f000 fdcd 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fa:	4871      	ldr	r0, [pc, #452]	; (80015c0 <display7SEG_2+0x35c>)
 80013fc:	f000 fdc7 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	486e      	ldr	r0, [pc, #440]	; (80015c0 <display7SEG_2+0x35c>)
 8001408:	f000 fdc1 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001412:	486b      	ldr	r0, [pc, #428]	; (80015c0 <display7SEG_2+0x35c>)
 8001414:	f000 fdbb 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141e:	4868      	ldr	r0, [pc, #416]	; (80015c0 <display7SEG_2+0x35c>)
 8001420:	f000 fdb5 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 5)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d128      	bne.n	800147c <display7SEG_2+0x218>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 800142a:	2200      	movs	r2, #0
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	4864      	ldr	r0, [pc, #400]	; (80015c0 <display7SEG_2+0x35c>)
 8001430:	f000 fdad 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,1);
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143a:	4861      	ldr	r0, [pc, #388]	; (80015c0 <display7SEG_2+0x35c>)
 800143c:	f000 fda7 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	485e      	ldr	r0, [pc, #376]	; (80015c0 <display7SEG_2+0x35c>)
 8001448:	f000 fda1 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001452:	485b      	ldr	r0, [pc, #364]	; (80015c0 <display7SEG_2+0x35c>)
 8001454:	f000 fd9b 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145e:	4858      	ldr	r0, [pc, #352]	; (80015c0 <display7SEG_2+0x35c>)
 8001460:	f000 fd95 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146a:	4855      	ldr	r0, [pc, #340]	; (80015c0 <display7SEG_2+0x35c>)
 800146c:	f000 fd8f 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001476:	4852      	ldr	r0, [pc, #328]	; (80015c0 <display7SEG_2+0x35c>)
 8001478:	f000 fd89 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 6)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b06      	cmp	r3, #6
 8001480:	d128      	bne.n	80014d4 <display7SEG_2+0x270>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 8001482:	2200      	movs	r2, #0
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	484e      	ldr	r0, [pc, #312]	; (80015c0 <display7SEG_2+0x35c>)
 8001488:	f000 fd81 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,1);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001492:	484b      	ldr	r0, [pc, #300]	; (80015c0 <display7SEG_2+0x35c>)
 8001494:	f000 fd7b 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149e:	4848      	ldr	r0, [pc, #288]	; (80015c0 <display7SEG_2+0x35c>)
 80014a0:	f000 fd75 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014aa:	4845      	ldr	r0, [pc, #276]	; (80015c0 <display7SEG_2+0x35c>)
 80014ac:	f000 fd6f 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4842      	ldr	r0, [pc, #264]	; (80015c0 <display7SEG_2+0x35c>)
 80014b8:	f000 fd69 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c2:	483f      	ldr	r0, [pc, #252]	; (80015c0 <display7SEG_2+0x35c>)
 80014c4:	f000 fd63 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ce:	483c      	ldr	r0, [pc, #240]	; (80015c0 <display7SEG_2+0x35c>)
 80014d0:	f000 fd5d 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 7)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b07      	cmp	r3, #7
 80014d8:	d128      	bne.n	800152c <display7SEG_2+0x2c8>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	4838      	ldr	r0, [pc, #224]	; (80015c0 <display7SEG_2+0x35c>)
 80014e0:	f000 fd55 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	4835      	ldr	r0, [pc, #212]	; (80015c0 <display7SEG_2+0x35c>)
 80014ec:	f000 fd4f 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f6:	4832      	ldr	r0, [pc, #200]	; (80015c0 <display7SEG_2+0x35c>)
 80014f8:	f000 fd49 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,1);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001502:	482f      	ldr	r0, [pc, #188]	; (80015c0 <display7SEG_2+0x35c>)
 8001504:	f000 fd43 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150e:	482c      	ldr	r0, [pc, #176]	; (80015c0 <display7SEG_2+0x35c>)
 8001510:	f000 fd3d 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,1);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151a:	4829      	ldr	r0, [pc, #164]	; (80015c0 <display7SEG_2+0x35c>)
 800151c:	f000 fd37 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,1);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	4826      	ldr	r0, [pc, #152]	; (80015c0 <display7SEG_2+0x35c>)
 8001528:	f000 fd31 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 8)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b08      	cmp	r3, #8
 8001530:	d128      	bne.n	8001584 <display7SEG_2+0x320>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 8001532:	2200      	movs	r2, #0
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	4822      	ldr	r0, [pc, #136]	; (80015c0 <display7SEG_2+0x35c>)
 8001538:	f000 fd29 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001542:	481f      	ldr	r0, [pc, #124]	; (80015c0 <display7SEG_2+0x35c>)
 8001544:	f000 fd23 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154e:	481c      	ldr	r0, [pc, #112]	; (80015c0 <display7SEG_2+0x35c>)
 8001550:	f000 fd1d 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155a:	4819      	ldr	r0, [pc, #100]	; (80015c0 <display7SEG_2+0x35c>)
 800155c:	f000 fd17 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,0);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001566:	4816      	ldr	r0, [pc, #88]	; (80015c0 <display7SEG_2+0x35c>)
 8001568:	f000 fd11 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001572:	4813      	ldr	r0, [pc, #76]	; (80015c0 <display7SEG_2+0x35c>)
 8001574:	f000 fd0b 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <display7SEG_2+0x35c>)
 8001580:	f000 fd05 	bl	8001f8e <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b09      	cmp	r3, #9
 8001588:	d12b      	bne.n	80015e2 <display7SEG_2+0x37e>
	{
		HAL_GPIO_WritePin(A2_GPIO_Port,A2_Pin,0);
 800158a:	2200      	movs	r2, #0
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <display7SEG_2+0x35c>)
 8001590:	f000 fcfd 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port,B2_Pin,0);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <display7SEG_2+0x35c>)
 800159c:	f000 fcf7 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C2_GPIO_Port,C2_Pin,0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <display7SEG_2+0x35c>)
 80015a8:	f000 fcf1 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port,D2_Pin,0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <display7SEG_2+0x35c>)
 80015b4:	f000 fceb 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E2_GPIO_Port,E2_Pin,1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015be:	e001      	b.n	80015c4 <display7SEG_2+0x360>
 80015c0:	40010c00 	.word	0x40010c00
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <display7SEG_2+0x388>)
 80015c6:	f000 fce2 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2_GPIO_Port,F2_Pin,0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d0:	4806      	ldr	r0, [pc, #24]	; (80015ec <display7SEG_2+0x388>)
 80015d2:	f000 fcdc 	bl	8001f8e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port,G2_Pin,0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <display7SEG_2+0x388>)
 80015de:	f000 fcd6 	bl	8001f8e <HAL_GPIO_WritePin>
	}
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_MspInit+0x5c>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_MspInit+0x5c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x5c>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x5c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_MspInit+0x60>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_MspInit+0x60>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001664:	d113      	bne.n	800168e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	61d3      	str	r3, [r2, #28]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_TIM_Base_MspInit+0x44>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	201c      	movs	r0, #28
 8001684:	f000 fabb 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001688:	201c      	movs	r0, #28
 800168a:	f000 fad4 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 f999 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM2_IRQHandler+0x10>)
 80016f2:	f001 f8f5 	bl	80028e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000f8 	.word	0x200000f8

08001700 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <setTimer1>:
int timer6_counter = 0;

int TIMER_CYCLE = 10;

void setTimer1(int duration)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <setTimer1+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	fb92 f3f3 	sdiv	r3, r2, r3
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <setTimer1+0x2c>)
 8001720:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <setTimer1+0x30>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000007c 	.word	0x2000007c
 8001738:	200000cc 	.word	0x200000cc
 800173c:	200000c8 	.word	0x200000c8

08001740 <setTimer2>:

void setTimer2(int duration)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <setTimer2+0x28>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001752:	4a06      	ldr	r2, [pc, #24]	; (800176c <setTimer2+0x2c>)
 8001754:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <setTimer2+0x30>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2000007c 	.word	0x2000007c
 800176c:	200000d4 	.word	0x200000d4
 8001770:	200000d0 	.word	0x200000d0

08001774 <setTimer3>:

void setTimer3(int duration)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <setTimer3+0x28>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	fb92 f3f3 	sdiv	r3, r2, r3
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <setTimer3+0x2c>)
 8001788:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <setTimer3+0x30>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000007c 	.word	0x2000007c
 80017a0:	200000dc 	.word	0x200000dc
 80017a4:	200000d8 	.word	0x200000d8

080017a8 <setTimer4>:

void setTimer4(int duration)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <setTimer4+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <setTimer4+0x2c>)
 80017bc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <setTimer4+0x30>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000007c 	.word	0x2000007c
 80017d4:	200000e4 	.word	0x200000e4
 80017d8:	200000e0 	.word	0x200000e0

080017dc <setTimer5>:

void setTimer5(int duration)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration / TIMER_CYCLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <setTimer5+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <setTimer5+0x2c>)
 80017f0:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <setTimer5+0x30>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000007c 	.word	0x2000007c
 8001808:	200000ec 	.word	0x200000ec
 800180c:	200000e8 	.word	0x200000e8

08001810 <setTimer6>:

void setTimer6(int duration)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <setTimer6+0x28>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001822:	4a06      	ldr	r2, [pc, #24]	; (800183c <setTimer6+0x2c>)
 8001824:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <setTimer6+0x30>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000007c 	.word	0x2000007c
 800183c:	200000f4 	.word	0x200000f4
 8001840:	200000f0 	.word	0x200000f0

08001844 <timeRun>:

void timeRun()
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8001848:	4b31      	ldr	r3, [pc, #196]	; (8001910 <timeRun+0xcc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	dd0b      	ble.n	8001868 <timeRun+0x24>
	{
		timer1_counter--;
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <timeRun+0xcc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	4a2e      	ldr	r2, [pc, #184]	; (8001910 <timeRun+0xcc>)
 8001858:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <timeRun+0xcc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	dc02      	bgt.n	8001868 <timeRun+0x24>
			timer1_flag = 1;
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <timeRun+0xd0>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0)
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <timeRun+0xd4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	dd0b      	ble.n	8001888 <timeRun+0x44>
	{
		timer2_counter--;
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <timeRun+0xd4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	4a28      	ldr	r2, [pc, #160]	; (8001918 <timeRun+0xd4>)
 8001878:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <timeRun+0xd4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	dc02      	bgt.n	8001888 <timeRun+0x44>
			timer2_flag = 1;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <timeRun+0xd8>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0)
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <timeRun+0xdc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd0b      	ble.n	80018a8 <timeRun+0x64>
	{
		timer3_counter--;
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <timeRun+0xdc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a22      	ldr	r2, [pc, #136]	; (8001920 <timeRun+0xdc>)
 8001898:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <timeRun+0xdc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	dc02      	bgt.n	80018a8 <timeRun+0x64>
			timer3_flag = 1;
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <timeRun+0xe0>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0)
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <timeRun+0xe4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd0b      	ble.n	80018c8 <timeRun+0x84>
	{
		timer4_counter--;
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <timeRun+0xe4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <timeRun+0xe4>)
 80018b8:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <timeRun+0xe4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dc02      	bgt.n	80018c8 <timeRun+0x84>
			timer4_flag = 1;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <timeRun+0xe8>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0)
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <timeRun+0xec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dd0b      	ble.n	80018e8 <timeRun+0xa4>
	{
		timer5_counter--;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <timeRun+0xec>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <timeRun+0xec>)
 80018d8:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0)
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <timeRun+0xec>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dc02      	bgt.n	80018e8 <timeRun+0xa4>
			timer5_flag = 1;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <timeRun+0xf0>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <timeRun+0xf4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd0b      	ble.n	8001908 <timeRun+0xc4>
	{
		timer6_counter--;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <timeRun+0xf4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <timeRun+0xf4>)
 80018f8:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0)
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <timeRun+0xf4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	dc02      	bgt.n	8001908 <timeRun+0xc4>
			timer6_flag = 1;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <timeRun+0xf8>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
	}
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	200000cc 	.word	0x200000cc
 8001914:	200000c8 	.word	0x200000c8
 8001918:	200000d4 	.word	0x200000d4
 800191c:	200000d0 	.word	0x200000d0
 8001920:	200000dc 	.word	0x200000dc
 8001924:	200000d8 	.word	0x200000d8
 8001928:	200000e4 	.word	0x200000e4
 800192c:	200000e0 	.word	0x200000e0
 8001930:	200000ec 	.word	0x200000ec
 8001934:	200000e8 	.word	0x200000e8
 8001938:	200000f4 	.word	0x200000f4
 800193c:	200000f0 	.word	0x200000f0

08001940 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001940:	f7ff fede 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480b      	ldr	r0, [pc, #44]	; (8001974 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001946:	490c      	ldr	r1, [pc, #48]	; (8001978 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <LoopFillZerobss+0x16>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800195c:	4c09      	ldr	r4, [pc, #36]	; (8001984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196a:	f001 fb05 	bl	8002f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196e:	f7ff f9cd 	bl	8000d0c <main>
  bx lr
 8001972:	4770      	bx	lr
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800197c:	08003014 	.word	0x08003014
  ldr r2, =_sbss
 8001980:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001984:	20000144 	.word	0x20000144

08001988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC1_2_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x28>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x28>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f923 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fe22 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40022000 	.word	0x40022000

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f93b 	bl	8001c52 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 f903 	bl	8001bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000078 	.word	0x20000078
 8001a10:	20000084 	.word	0x20000084
 8001a14:	20000080 	.word	0x20000080

08001a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_IncTick+0x1c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_IncTick+0x20>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_IncTick+0x20>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000084 	.word	0x20000084
 8001a38:	20000140 	.word	0x20000140

08001a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <HAL_GetTick+0x10>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000140 	.word	0x20000140

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4906      	ldr	r1, [pc, #24]	; (8001ae8 <__NVIC_EnableIRQ+0x34>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff90 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff2d 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff42 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff90 	bl	8001b40 <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5f 	bl	8001aec <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff35 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffa2 	bl	8001ba4 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b08b      	sub	sp, #44	; 0x2c
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	e148      	b.n	8001f12 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c80:	2201      	movs	r2, #1
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 8137 	bne.w	8001f0c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4aa3      	ldr	r2, [pc, #652]	; (8001f30 <HAL_GPIO_Init+0x2c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d05e      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001ca8:	4aa1      	ldr	r2, [pc, #644]	; (8001f30 <HAL_GPIO_Init+0x2c4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d875      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cae:	4aa1      	ldr	r2, [pc, #644]	; (8001f34 <HAL_GPIO_Init+0x2c8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d058      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001cb4:	4a9f      	ldr	r2, [pc, #636]	; (8001f34 <HAL_GPIO_Init+0x2c8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d86f      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cba:	4a9f      	ldr	r2, [pc, #636]	; (8001f38 <HAL_GPIO_Init+0x2cc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d052      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001cc0:	4a9d      	ldr	r2, [pc, #628]	; (8001f38 <HAL_GPIO_Init+0x2cc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d869      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cc6:	4a9d      	ldr	r2, [pc, #628]	; (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d04c      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001ccc:	4a9b      	ldr	r2, [pc, #620]	; (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d863      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cd2:	4a9b      	ldr	r2, [pc, #620]	; (8001f40 <HAL_GPIO_Init+0x2d4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d046      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
 8001cd8:	4a99      	ldr	r2, [pc, #612]	; (8001f40 <HAL_GPIO_Init+0x2d4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d85d      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001cde:	2b12      	cmp	r3, #18
 8001ce0:	d82a      	bhi.n	8001d38 <HAL_GPIO_Init+0xcc>
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d859      	bhi.n	8001d9a <HAL_GPIO_Init+0x12e>
 8001ce6:	a201      	add	r2, pc, #4	; (adr r2, 8001cec <HAL_GPIO_Init+0x80>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001d67 	.word	0x08001d67
 8001cf0:	08001d41 	.word	0x08001d41
 8001cf4:	08001d53 	.word	0x08001d53
 8001cf8:	08001d95 	.word	0x08001d95
 8001cfc:	08001d9b 	.word	0x08001d9b
 8001d00:	08001d9b 	.word	0x08001d9b
 8001d04:	08001d9b 	.word	0x08001d9b
 8001d08:	08001d9b 	.word	0x08001d9b
 8001d0c:	08001d9b 	.word	0x08001d9b
 8001d10:	08001d9b 	.word	0x08001d9b
 8001d14:	08001d9b 	.word	0x08001d9b
 8001d18:	08001d9b 	.word	0x08001d9b
 8001d1c:	08001d9b 	.word	0x08001d9b
 8001d20:	08001d9b 	.word	0x08001d9b
 8001d24:	08001d9b 	.word	0x08001d9b
 8001d28:	08001d9b 	.word	0x08001d9b
 8001d2c:	08001d9b 	.word	0x08001d9b
 8001d30:	08001d49 	.word	0x08001d49
 8001d34:	08001d5d 	.word	0x08001d5d
 8001d38:	4a82      	ldr	r2, [pc, #520]	; (8001f44 <HAL_GPIO_Init+0x2d8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d3e:	e02c      	b.n	8001d9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e029      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	623b      	str	r3, [r7, #32]
          break;
 8001d50:	e024      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	3308      	adds	r3, #8
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e01f      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	330c      	adds	r3, #12
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e01a      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	623b      	str	r3, [r7, #32]
          break;
 8001d72:	e013      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	611a      	str	r2, [r3, #16]
          break;
 8001d86:	e009      	b.n	8001d9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d88:	2308      	movs	r3, #8
 8001d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	615a      	str	r2, [r3, #20]
          break;
 8001d92:	e003      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x130>
          break;
 8001d9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2bff      	cmp	r3, #255	; 0xff
 8001da0:	d801      	bhi.n	8001da6 <HAL_GPIO_Init+0x13a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	e001      	b.n	8001daa <HAL_GPIO_Init+0x13e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3304      	adds	r3, #4
 8001daa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2bff      	cmp	r3, #255	; 0xff
 8001db0:	d802      	bhi.n	8001db8 <HAL_GPIO_Init+0x14c>
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	e002      	b.n	8001dbe <HAL_GPIO_Init+0x152>
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	3b08      	subs	r3, #8
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	210f      	movs	r1, #15
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	6a39      	ldr	r1, [r7, #32]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8090 	beq.w	8001f0c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dec:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <HAL_GPIO_Init+0x2dc>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a55      	ldr	r2, [pc, #340]	; (8001f48 <HAL_GPIO_Init+0x2dc>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b53      	ldr	r3, [pc, #332]	; (8001f48 <HAL_GPIO_Init+0x2dc>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e04:	4a51      	ldr	r2, [pc, #324]	; (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a49      	ldr	r2, [pc, #292]	; (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00d      	beq.n	8001e4c <HAL_GPIO_Init+0x1e0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a48      	ldr	r2, [pc, #288]	; (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <HAL_GPIO_Init+0x1dc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_GPIO_Init+0x1d8>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e004      	b.n	8001e4e <HAL_GPIO_Init+0x1e2>
 8001e44:	2303      	movs	r3, #3
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x1e2>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_GPIO_Init+0x1e2>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	f002 0203 	and.w	r2, r2, #3
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	4093      	lsls	r3, r2
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e5e:	493b      	ldr	r1, [pc, #236]	; (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4937      	ldr	r1, [pc, #220]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e86:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4933      	ldr	r1, [pc, #204]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	492d      	ldr	r1, [pc, #180]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eae:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4929      	ldr	r1, [pc, #164]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4923      	ldr	r1, [pc, #140]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	491f      	ldr	r1, [pc, #124]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4919      	ldr	r1, [pc, #100]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4915      	ldr	r1, [pc, #84]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	3301      	adds	r3, #1
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f aeaf 	bne.w	8001c80 <HAL_GPIO_Init+0x14>
  }
}
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
 8001f26:	372c      	adds	r7, #44	; 0x2c
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	10320000 	.word	0x10320000
 8001f34:	10310000 	.word	0x10310000
 8001f38:	10220000 	.word	0x10220000
 8001f3c:	10210000 	.word	0x10210000
 8001f40:	10120000 	.word	0x10120000
 8001f44:	10110000 	.word	0x10110000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40010800 	.word	0x40010800
 8001f54:	40010c00 	.word	0x40010c00
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e001      	b.n	8001f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	807b      	strh	r3, [r7, #2]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f9e:	787b      	ldrb	r3, [r7, #1]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa4:	887a      	ldrh	r2, [r7, #2]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001faa:	e003      	b.n	8001fb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	041a      	lsls	r2, r3, #16
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	611a      	str	r2, [r3, #16]
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fd0:	887a      	ldrh	r2, [r7, #2]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	041a      	lsls	r2, r3, #16
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	400b      	ands	r3, r1
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	611a      	str	r2, [r3, #16]
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e26c      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8087 	beq.w	800211e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002010:	4b92      	ldr	r3, [pc, #584]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b04      	cmp	r3, #4
 800201a:	d00c      	beq.n	8002036 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800201c:	4b8f      	ldr	r3, [pc, #572]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d112      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
 8002028:	4b8c      	ldr	r3, [pc, #560]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d10b      	bne.n	800204e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002036:	4b89      	ldr	r3, [pc, #548]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d06c      	beq.n	800211c <HAL_RCC_OscConfig+0x12c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d168      	bne.n	800211c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e246      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x76>
 8002058:	4b80      	ldr	r3, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e02e      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b7b      	ldr	r3, [pc, #492]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a7a      	ldr	r2, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b78      	ldr	r3, [pc, #480]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a77      	ldr	r2, [pc, #476]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e01d      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0xbc>
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a71      	ldr	r2, [pc, #452]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a6e      	ldr	r2, [pc, #440]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0xd4>
 80020ac:	4b6b      	ldr	r3, [pc, #428]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b68      	ldr	r3, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a67      	ldr	r2, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fcb6 	bl	8001a3c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fcb2 	bl	8001a3c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1fa      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b5d      	ldr	r3, [pc, #372]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0xe4>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fca2 	bl	8001a3c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fc9e 	bl	8001a3c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1e6      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x10c>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d063      	beq.n	80021f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002136:	4b49      	ldr	r3, [pc, #292]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b08      	cmp	r3, #8
 8002140:	d11c      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e1ba      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4939      	ldr	r1, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e03a      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCC_OscConfig+0x270>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff fc57 	bl	8001a3c <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff fc53 	bl	8001a3c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e19b      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4927      	ldr	r1, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_RCC_OscConfig+0x270>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fc36 	bl	8001a3c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7ff fc32 	bl	8001a3c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e17a      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03a      	beq.n	8002274 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d019      	beq.n	800223a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x274>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220c:	f7ff fc16 	bl	8001a3c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7ff fc12 	bl	8001a3c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e15a      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_RCC_OscConfig+0x26c>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 fa9a 	bl	800276c <RCC_Delay>
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_RCC_OscConfig+0x274>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7ff fbfc 	bl	8001a3c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002246:	e00f      	b.n	8002268 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7ff fbf8 	bl	8001a3c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d908      	bls.n	8002268 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e140      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	42420000 	.word	0x42420000
 8002264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	4b9e      	ldr	r3, [pc, #632]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e9      	bne.n	8002248 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a6 	beq.w	80023ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b97      	ldr	r3, [pc, #604]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b94      	ldr	r3, [pc, #592]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a93      	ldr	r2, [pc, #588]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]
 800229e:	4b91      	ldr	r3, [pc, #580]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b8e      	ldr	r3, [pc, #568]	; (80024e8 <HAL_RCC_OscConfig+0x4f8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <HAL_RCC_OscConfig+0x4f8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a8a      	ldr	r2, [pc, #552]	; (80024e8 <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7ff fbb9 	bl	8001a3c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7ff fbb5 	bl	8001a3c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0fd      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <HAL_RCC_OscConfig+0x4f8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x312>
 80022f4:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	e02d      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x334>
 800230a:	4b76      	ldr	r3, [pc, #472]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a75      	ldr	r2, [pc, #468]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a72      	ldr	r2, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	e01c      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d10c      	bne.n	8002346 <HAL_RCC_OscConfig+0x356>
 800232c:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4a69      	ldr	r2, [pc, #420]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x36e>
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a66      	ldr	r2, [pc, #408]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	4b64      	ldr	r3, [pc, #400]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a63      	ldr	r2, [pc, #396]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7ff fb69 	bl	8001a3c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7ff fb65 	bl	8001a3c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0ab      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RCC_OscConfig+0x37e>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7ff fb53 	bl	8001a3c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff fb4f 	bl	8001a3c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e095      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ee      	bne.n	800239a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a47      	ldr	r2, [pc, #284]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8081 	beq.w	80024da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d8:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d061      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d146      	bne.n	800247a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <HAL_RCC_OscConfig+0x4fc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff fb23 	bl	8001a3c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7ff fb1f 	bl	8001a3c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e067      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240c:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d108      	bne.n	8002434 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002422:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	492d      	ldr	r1, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a19      	ldr	r1, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	430b      	orrs	r3, r1
 8002446:	4927      	ldr	r1, [pc, #156]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x4fc>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7ff faf3 	bl	8001a3c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7ff faef 	bl	8001a3c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e037      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x46a>
 8002478:	e02f      	b.n	80024da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_RCC_OscConfig+0x4fc>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff fadc 	bl	8001a3c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7ff fad8 	bl	8001a3c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e020      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x498>
 80024a6:	e018      	b.n	80024da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e013      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
 80024ec:	42420060 	.word	0x42420060

080024f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0d0      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d910      	bls.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4965      	ldr	r1, [pc, #404]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002556:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800256e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d040      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d115      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e073      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e06b      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4936      	ldr	r1, [pc, #216]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7ff fa2c 	bl	8001a3c <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7ff fa28 	bl	8001a3c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e053      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d210      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4922      	ldr	r1, [pc, #136]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800267e:	f000 f821 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	; (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_RCC_ClockConfig+0x1cc>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1d0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f98a 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08002fe8 	.word	0x08002fe8
 80026bc:	20000078 	.word	0x20000078
 80026c0:	20000080 	.word	0x20000080

080026c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_GetSysClockFreq+0x94>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x30>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x36>
 80026f2:	e027      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 80026f6:	613b      	str	r3, [r7, #16]
      break;
 80026f8:	e027      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0c9b      	lsrs	r3, r3, #18
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	4a17      	ldr	r2, [pc, #92]	; (8002760 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_GetSysClockFreq+0x94>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0c5b      	lsrs	r3, r3, #17
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <HAL_RCC_GetSysClockFreq+0xa0>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 8002726:	fb02 f203 	mul.w	r2, r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e004      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	613b      	str	r3, [r7, #16]
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetSysClockFreq+0x98>)
 8002746:	613b      	str	r3, [r7, #16]
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	693b      	ldr	r3, [r7, #16]
}
 800274c:	4618      	mov	r0, r3
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	007a1200 	.word	0x007a1200
 8002760:	08002ff8 	.word	0x08002ff8
 8002764:	08003008 	.word	0x08003008
 8002768:	003d0900 	.word	0x003d0900

0800276c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCC_Delay+0x34>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <RCC_Delay+0x38>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a5b      	lsrs	r3, r3, #9
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002788:	bf00      	nop
  }
  while (Delay --);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <RCC_Delay+0x1c>
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000078 	.word	0x20000078
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e041      	b.n	800283e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe ff40 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fa6e 	bl	8002cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e035      	b.n	80028cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_TIM_Base_Start_IT+0x90>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x4e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d004      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x4e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_TIM_Base_Start_IT+0x94>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d111      	bne.n	80028ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d010      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	e007      	b.n	80028ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400

080028e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0202 	mvn.w	r2, #2
 800290c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9b4 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f9a7 	bl	8002c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f9b6 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0204 	mvn.w	r2, #4
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f98a 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f97d 	bl	8002c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f98c 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0208 	mvn.w	r2, #8
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2204      	movs	r2, #4
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f960 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f953 	bl	8002c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f962 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0210 	mvn.w	r2, #16
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f936 	bl	8002c90 <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f929 	bl	8002c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f938 	bl	8002ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0201 	mvn.w	r2, #1
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fa68 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6e:	2b80      	cmp	r3, #128	; 0x80
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d107      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa6b 	bl	8002f66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d10e      	bne.n	8002abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d107      	bne.n	8002abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f8fc 	bl	8002cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d107      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0220 	mvn.w	r2, #32
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa36 	bl	8002f54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_TIM_ConfigClockSource+0x1c>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0b4      	b.n	8002c76 <HAL_TIM_ConfigClockSource+0x186>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b44:	d03e      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0xd4>
 8002b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4a:	f200 8087 	bhi.w	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b52:	f000 8086 	beq.w	8002c62 <HAL_TIM_ConfigClockSource+0x172>
 8002b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5a:	d87f      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b70      	cmp	r3, #112	; 0x70
 8002b5e:	d01a      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0xa6>
 8002b60:	2b70      	cmp	r3, #112	; 0x70
 8002b62:	d87b      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b60      	cmp	r3, #96	; 0x60
 8002b66:	d050      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0x11a>
 8002b68:	2b60      	cmp	r3, #96	; 0x60
 8002b6a:	d877      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b50      	cmp	r3, #80	; 0x50
 8002b6e:	d03c      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0xfa>
 8002b70:	2b50      	cmp	r3, #80	; 0x50
 8002b72:	d873      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d058      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0x13a>
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d86f      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b30      	cmp	r3, #48	; 0x30
 8002b7e:	d064      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x15a>
 8002b80:	2b30      	cmp	r3, #48	; 0x30
 8002b82:	d86b      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d060      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x15a>
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d867      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d05c      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x15a>
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d05a      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x15a>
 8002b94:	e062      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f000 f95e 	bl	8002e66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	609a      	str	r2, [r3, #8]
      break;
 8002bc2:	e04f      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6899      	ldr	r1, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f000 f947 	bl	8002e66 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be6:	609a      	str	r2, [r3, #8]
      break;
 8002be8:	e03c      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f000 f8be 	bl	8002d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2150      	movs	r1, #80	; 0x50
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f915 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c08:	e02c      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f000 f8dc 	bl	8002dd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2160      	movs	r1, #96	; 0x60
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f905 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c28:	e01c      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f000 f89e 	bl	8002d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2140      	movs	r1, #64	; 0x40
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f8f5 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c48:	e00c      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f000 f8ec 	bl	8002e32 <TIM_ITRx_SetConfig>
      break;
 8002c5a:	e003      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c60:	e000      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
	...

08002cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <TIM_Base_SetConfig+0xa8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <TIM_Base_SetConfig+0x28>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d003      	beq.n	8002cf0 <TIM_Base_SetConfig+0x28>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <TIM_Base_SetConfig+0xac>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d108      	bne.n	8002d02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <TIM_Base_SetConfig+0xa8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <TIM_Base_SetConfig+0x52>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d003      	beq.n	8002d1a <TIM_Base_SetConfig+0x52>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <TIM_Base_SetConfig+0xac>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d108      	bne.n	8002d2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <TIM_Base_SetConfig+0xa8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d103      	bne.n	8002d60 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	615a      	str	r2, [r3, #20]
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40000400 	.word	0x40000400

08002d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 0201 	bic.w	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 030a 	bic.w	r3, r3, #10
 8002db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	f023 0210 	bic.w	r2, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	031b      	lsls	r3, r3, #12
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f043 0307 	orr.w	r3, r3, #7
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b087      	sub	sp, #28
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	609a      	str	r2, [r3, #8]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e041      	b.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d004      	beq.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10c      	bne.n	8002f2e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400

08002f54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <__libc_init_array>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	4d0c      	ldr	r5, [pc, #48]	; (8002fb0 <__libc_init_array+0x38>)
 8002f7e:	4c0d      	ldr	r4, [pc, #52]	; (8002fb4 <__libc_init_array+0x3c>)
 8002f80:	1b64      	subs	r4, r4, r5
 8002f82:	10a4      	asrs	r4, r4, #2
 8002f84:	42a6      	cmp	r6, r4
 8002f86:	d109      	bne.n	8002f9c <__libc_init_array+0x24>
 8002f88:	f000 f822 	bl	8002fd0 <_init>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	4d0a      	ldr	r5, [pc, #40]	; (8002fb8 <__libc_init_array+0x40>)
 8002f90:	4c0a      	ldr	r4, [pc, #40]	; (8002fbc <__libc_init_array+0x44>)
 8002f92:	1b64      	subs	r4, r4, r5
 8002f94:	10a4      	asrs	r4, r4, #2
 8002f96:	42a6      	cmp	r6, r4
 8002f98:	d105      	bne.n	8002fa6 <__libc_init_array+0x2e>
 8002f9a:	bd70      	pop	{r4, r5, r6, pc}
 8002f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa0:	4798      	blx	r3
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7ee      	b.n	8002f84 <__libc_init_array+0xc>
 8002fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002faa:	4798      	blx	r3
 8002fac:	3601      	adds	r6, #1
 8002fae:	e7f2      	b.n	8002f96 <__libc_init_array+0x1e>
 8002fb0:	0800300c 	.word	0x0800300c
 8002fb4:	0800300c 	.word	0x0800300c
 8002fb8:	0800300c 	.word	0x0800300c
 8002fbc:	08003010 	.word	0x08003010

08002fc0 <memset>:
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4402      	add	r2, r0
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d100      	bne.n	8002fca <memset+0xa>
 8002fc8:	4770      	bx	lr
 8002fca:	f803 1b01 	strb.w	r1, [r3], #1
 8002fce:	e7f9      	b.n	8002fc4 <memset+0x4>

08002fd0 <_init>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr

08002fdc <_fini>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr
